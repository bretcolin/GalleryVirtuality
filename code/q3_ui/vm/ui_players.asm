code
proc UI_PlayerInfo_SetWeapon 84 8
file "../ui_players.c"
line 33
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// ui_players.c
;4:
;5:#include "ui_local.h"
;6:
;7:
;8:#define UI_TIMER_GESTURE		2300
;9:#define UI_TIMER_JUMP			1000
;10:#define UI_TIMER_LAND			130
;11:#define UI_TIMER_WEAPON_SWITCH	300
;12:#define UI_TIMER_ATTACK			500
;13:#define	UI_TIMER_MUZZLE_FLASH	20
;14:#define	UI_TIMER_WEAPON_DELAY	250
;15:
;16:#define JUMP_HEIGHT				56
;17:
;18:#define SWINGSPEED				0.3f
;19:
;20:#define SPIN_SPEED				0.9f
;21:#define COAST_TIME				1000
;22:
;23:
;24:static int			dp_realtime;
;25:static float		jumpHeight;
;26:
;27:
;28:/*
;29:===============
;30:UI_PlayerInfo_SetWeapon
;31:===============
;32:*/
;33:static void UI_PlayerInfo_SetWeapon( playerInfo_t *pi, weapon_t weaponNum ) {
line 37
;34:	gitem_t *	item;
;35:	char		path[MAX_QPATH];
;36:
;37:	pi->currentWeapon = weaponNum;
ADDRFP4 0
INDIRP4
CNSTI4 1040
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
LABELV $68
line 39
;38:tryagain:
;39:	pi->realWeapon = weaponNum;
ADDRFP4 0
INDIRP4
CNSTI4 1104
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 40
;40:	pi->weaponModel = 0;
ADDRFP4 0
INDIRP4
CNSTI4 988
ADDP4
CNSTI4 0
ASGNI4
line 41
;41:	pi->barrelModel = 0;
ADDRFP4 0
INDIRP4
CNSTI4 992
ADDP4
CNSTI4 0
ASGNI4
line 42
;42:	pi->flashModel = 0;
ADDRFP4 0
INDIRP4
CNSTI4 996
ADDP4
CNSTI4 0
ASGNI4
line 44
;43:
;44:	if ( weaponNum == WP_HAND ) {
ADDRFP4 4
INDIRI4
CNSTI4 1
NEI4 $69
line 45
;45:		return;
ADDRGP4 $67
JUMPV
LABELV $69
line 48
;46:	}
;47:
;48:	for ( item = bg_itemlist + 1; item->classname ; item++ ) {
ADDRLP4 0
ADDRGP4 bg_itemlist+52
ASGNP4
ADDRGP4 $74
JUMPV
LABELV $71
line 49
;49:		if ( item->giType != IT_WEAPON ) {
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
EQI4 $76
line 50
;50:			continue;
ADDRGP4 $72
JUMPV
LABELV $76
line 52
;51:		}
;52:		if ( item->giTag == weaponNum ) {
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 4
INDIRI4
NEI4 $78
line 53
;53:			break;
ADDRGP4 $73
JUMPV
LABELV $78
line 55
;54:		}
;55:	}
LABELV $72
line 48
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
LABELV $74
ADDRLP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $71
LABELV $73
line 57
;56:
;57:	if ( item->classname ) {
ADDRLP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $80
line 58
;58:		pi->weaponModel = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 988
ADDP4
ADDRLP4 68
INDIRI4
ASGNI4
line 59
;59:	}
LABELV $80
line 61
;60:
;61:	if( pi->weaponModel == 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 988
ADDP4
INDIRI4
CNSTI4 0
NEI4 $82
line 62
;62:		if( weaponNum == WP_HAND ) {
ADDRFP4 4
INDIRI4
CNSTI4 1
NEI4 $84
line 63
;63:			weaponNum = WP_HAND;
ADDRFP4 4
CNSTI4 1
ASGNI4
line 64
;64:			goto tryagain;
ADDRGP4 $68
JUMPV
LABELV $84
line 66
;65:		}
;66:		weaponNum = WP_HAND;
ADDRFP4 4
CNSTI4 1
ASGNI4
line 67
;67:		goto tryagain;
ADDRGP4 $68
JUMPV
LABELV $82
line 70
;68:	}
;69:
;70:	if ( weaponNum == WP_HAND || weaponNum == WP_HAND ) {
ADDRLP4 68
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 72
CNSTI4 1
ASGNI4
ADDRLP4 68
INDIRI4
ADDRLP4 72
INDIRI4
EQI4 $88
ADDRLP4 68
INDIRI4
ADDRLP4 72
INDIRI4
NEI4 $86
LABELV $88
line 71
;71:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 72
;72:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 73
;73:		strcat( path, "_barrel.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $89
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 74
;74:		pi->barrelModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 76
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 992
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 75
;75:	}
LABELV $86
line 77
;76:
;77:	strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 78
;78:	COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 79
;79:	strcat( path, "_flash.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $90
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 80
;80:	pi->flashModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 76
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 996
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 82
;81:
;82:	switch( weaponNum ) {
ADDRLP4 80
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 1
EQI4 $94
ADDRGP4 $91
JUMPV
LABELV $94
line 84
;83:	case WP_HAND:
;84:		MAKERGB( pi->flashDlightColor, 0.6f, 0.6f, 1 );
ADDRFP4 0
INDIRP4
CNSTI4 1000
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1004
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1008
ADDP4
CNSTF4 1065353216
ASGNF4
line 85
;85:		break;
ADDRGP4 $92
JUMPV
LABELV $91
line 88
;86:
;87:	default:
;88:		MAKERGB( pi->flashDlightColor, 1, 1, 1 );
ADDRFP4 0
INDIRP4
CNSTI4 1000
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1004
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1008
ADDP4
CNSTF4 1065353216
ASGNF4
line 89
;89:		break;
LABELV $92
line 91
;90:	}
;91:}
LABELV $67
endproc UI_PlayerInfo_SetWeapon 84 8
proc UI_ForceLegsAnim 8 0
line 99
;92:
;93:
;94:/*
;95:===============
;96:UI_ForceLegsAnim
;97:===============
;98:*/
;99:static void UI_ForceLegsAnim( playerInfo_t *pi, int anim ) {
line 100
;100:	pi->legsAnim = ( ( pi->legsAnim & ANIM_TOGGLEBIT ) ^ ANIM_TOGGLEBIT ) | anim;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1044
ADDP4
ASGNP4
ADDRLP4 4
CNSTI4 128
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
BANDI4
ADDRLP4 4
INDIRI4
BXORI4
ADDRFP4 4
INDIRI4
BORI4
ASGNI4
line 102
;101:
;102:	if ( anim == LEGS_JUMP ) {
ADDRFP4 4
INDIRI4
CNSTI4 18
NEI4 $96
line 103
;103:		pi->legsAnimationTimer = UI_TIMER_JUMP;
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
CNSTI4 1000
ASGNI4
line 104
;104:	}
LABELV $96
line 105
;105:}
LABELV $95
endproc UI_ForceLegsAnim 8 0
proc UI_SetLegsAnim 0 8
line 113
;106:
;107:
;108:/*
;109:===============
;110:UI_SetLegsAnim
;111:===============
;112:*/
;113:static void UI_SetLegsAnim( playerInfo_t *pi, int anim ) {
line 114
;114:	if ( pi->pendingLegsAnim ) {
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
INDIRI4
CNSTI4 0
EQI4 $99
line 115
;115:		anim = pi->pendingLegsAnim;
ADDRFP4 4
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
INDIRI4
ASGNI4
line 116
;116:		pi->pendingLegsAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
CNSTI4 0
ASGNI4
line 117
;117:	}
LABELV $99
line 118
;118:	UI_ForceLegsAnim( pi, anim );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 UI_ForceLegsAnim
CALLV
pop
line 119
;119:}
LABELV $98
endproc UI_SetLegsAnim 0 8
proc UI_ForceTorsoAnim 12 0
line 127
;120:
;121:
;122:/*
;123:===============
;124:UI_ForceTorsoAnim
;125:===============
;126:*/
;127:static void UI_ForceTorsoAnim( playerInfo_t *pi, int anim ) {
line 128
;128:	pi->torsoAnim = ( ( pi->torsoAnim & ANIM_TOGGLEBIT ) ^ ANIM_TOGGLEBIT ) | anim;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1048
ADDP4
ASGNP4
ADDRLP4 4
CNSTI4 128
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
BANDI4
ADDRLP4 4
INDIRI4
BXORI4
ADDRFP4 4
INDIRI4
BORI4
ASGNI4
line 130
;129:
;130:	if ( anim == TORSO_GESTURE ) {
ADDRFP4 4
INDIRI4
CNSTI4 6
NEI4 $102
line 131
;131:		pi->torsoAnimationTimer = UI_TIMER_GESTURE;
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
CNSTI4 2300
ASGNI4
line 132
;132:	}
LABELV $102
line 134
;133:
;134:	if ( anim == TORSO_ATTACK || anim == TORSO_ATTACK2 ) {
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 7
EQI4 $106
ADDRLP4 8
INDIRI4
CNSTI4 8
NEI4 $104
LABELV $106
line 135
;135:		pi->torsoAnimationTimer = UI_TIMER_ATTACK;
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
CNSTI4 500
ASGNI4
line 136
;136:	}
LABELV $104
line 137
;137:}
LABELV $101
endproc UI_ForceTorsoAnim 12 0
proc UI_SetTorsoAnim 0 8
line 145
;138:
;139:
;140:/*
;141:===============
;142:UI_SetTorsoAnim
;143:===============
;144:*/
;145:static void UI_SetTorsoAnim( playerInfo_t *pi, int anim ) {
line 146
;146:	if ( pi->pendingTorsoAnim ) {
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
INDIRI4
CNSTI4 0
EQI4 $108
line 147
;147:		anim = pi->pendingTorsoAnim;
ADDRFP4 4
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
INDIRI4
ASGNI4
line 148
;148:		pi->pendingTorsoAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
CNSTI4 0
ASGNI4
line 149
;149:	}
LABELV $108
line 151
;150:
;151:	UI_ForceTorsoAnim( pi, anim );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 UI_ForceTorsoAnim
CALLV
pop
line 152
;152:}
LABELV $107
endproc UI_SetTorsoAnim 0 8
proc UI_TorsoSequencing 16 8
line 160
;153:
;154:
;155:/*
;156:===============
;157:UI_TorsoSequencing
;158:===============
;159:*/
;160:static void UI_TorsoSequencing( playerInfo_t *pi ) {
line 163
;161:	int		currentAnim;
;162:
;163:	currentAnim = pi->torsoAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1048
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 165
;164:
;165:	if ( pi->weapon != pi->currentWeapon ) {
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 1040
ADDP4
INDIRI4
EQI4 $111
line 166
;166:		if ( currentAnim != TORSO_DROP ) {
ADDRLP4 0
INDIRI4
CNSTI4 9
EQI4 $113
line 167
;167:			pi->torsoAnimationTimer = UI_TIMER_WEAPON_SWITCH;
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
CNSTI4 300
ASGNI4
line 168
;168:			UI_ForceTorsoAnim( pi, TORSO_DROP );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 9
ARGI4
ADDRGP4 UI_ForceTorsoAnim
CALLV
pop
line 169
;169:		}
LABELV $113
line 170
;170:	}
LABELV $111
line 172
;171:
;172:	if ( pi->torsoAnimationTimer > 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
INDIRI4
CNSTI4 0
LEI4 $115
line 173
;173:		return;
ADDRGP4 $110
JUMPV
LABELV $115
line 176
;174:	}
;175:
;176:	if( currentAnim == TORSO_GESTURE ) {
ADDRLP4 0
INDIRI4
CNSTI4 6
NEI4 $117
line 177
;177:		UI_SetTorsoAnim( pi, TORSO_STAND );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 11
ARGI4
ADDRGP4 UI_SetTorsoAnim
CALLV
pop
line 178
;178:		return;
ADDRGP4 $110
JUMPV
LABELV $117
line 181
;179:	}
;180:
;181:	if( currentAnim == TORSO_ATTACK || currentAnim == TORSO_ATTACK2 ) {
ADDRLP4 0
INDIRI4
CNSTI4 7
EQI4 $121
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $119
LABELV $121
line 182
;182:		UI_SetTorsoAnim( pi, TORSO_STAND );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 11
ARGI4
ADDRGP4 UI_SetTorsoAnim
CALLV
pop
line 183
;183:		return;
ADDRGP4 $110
JUMPV
LABELV $119
line 186
;184:	}
;185:
;186:	if ( currentAnim == TORSO_DROP ) {
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $122
line 187
;187:		UI_PlayerInfo_SetWeapon( pi, pi->weapon );
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_PlayerInfo_SetWeapon
CALLV
pop
line 188
;188:		pi->torsoAnimationTimer = UI_TIMER_WEAPON_SWITCH;
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
CNSTI4 300
ASGNI4
line 189
;189:		UI_ForceTorsoAnim( pi, TORSO_RAISE );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 10
ARGI4
ADDRGP4 UI_ForceTorsoAnim
CALLV
pop
line 190
;190:		return;
ADDRGP4 $110
JUMPV
LABELV $122
line 193
;191:	}
;192:
;193:	if ( currentAnim == TORSO_RAISE ) {
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $124
line 194
;194:		UI_SetTorsoAnim( pi, TORSO_STAND );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 11
ARGI4
ADDRGP4 UI_SetTorsoAnim
CALLV
pop
line 195
;195:		return;
LABELV $124
line 197
;196:	}
;197:}
LABELV $110
endproc UI_TorsoSequencing 16 8
proc UI_LegsSequencing 8 8
line 205
;198:
;199:
;200:/*
;201:===============
;202:UI_LegsSequencing
;203:===============
;204:*/
;205:static void UI_LegsSequencing( playerInfo_t *pi ) {
line 208
;206:	int		currentAnim;
;207:
;208:	currentAnim = pi->legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 210
;209:
;210:	if ( pi->legsAnimationTimer > 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
INDIRI4
CNSTI4 0
LEI4 $127
line 211
;211:		if ( currentAnim == LEGS_JUMP ) {
ADDRLP4 0
INDIRI4
CNSTI4 18
NEI4 $126
line 212
;212:			jumpHeight = JUMP_HEIGHT * sin( M_PI * ( UI_TIMER_JUMP - pi->legsAnimationTimer ) / UI_TIMER_JUMP );
CNSTF4 1078530011
CNSTI4 1000
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 1148846080
DIVF4
ARGF4
ADDRLP4 4
ADDRGP4 sin
CALLF4
ASGNF4
ADDRGP4 jumpHeight
CNSTF4 1113587712
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 213
;213:		}
line 214
;214:		return;
ADDRGP4 $126
JUMPV
LABELV $127
line 217
;215:	}
;216:
;217:	if ( currentAnim == LEGS_JUMP ) {
ADDRLP4 0
INDIRI4
CNSTI4 18
NEI4 $131
line 218
;218:		UI_ForceLegsAnim( pi, LEGS_LAND );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 19
ARGI4
ADDRGP4 UI_ForceLegsAnim
CALLV
pop
line 219
;219:		pi->legsAnimationTimer = UI_TIMER_LAND;
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
CNSTI4 130
ASGNI4
line 220
;220:		jumpHeight = 0;
ADDRGP4 jumpHeight
CNSTF4 0
ASGNF4
line 221
;221:		return;
ADDRGP4 $126
JUMPV
LABELV $131
line 224
;222:	}
;223:
;224:	if ( currentAnim == LEGS_LAND ) {
ADDRLP4 0
INDIRI4
CNSTI4 19
NEI4 $133
line 225
;225:		UI_SetLegsAnim( pi, LEGS_IDLE );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 22
ARGI4
ADDRGP4 UI_SetLegsAnim
CALLV
pop
line 226
;226:		return;
LABELV $133
line 228
;227:	}
;228:}
LABELV $126
endproc UI_LegsSequencing 8 8
proc UI_PositionEntityOnTag 84 24
line 237
;229:
;230:
;231:/*
;232:======================
;233:UI_PositionEntityOnTag
;234:======================
;235:*/
;236:static void UI_PositionEntityOnTag( refEntity_t *entity, const refEntity_t *parent, 
;237:							clipHandle_t parentModel, char *tagName ) {
line 242
;238:	int				i;
;239:	orientation_t	lerped;
;240:	
;241:	// lerp the tag
;242:	trap_CM_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,
ADDRLP4 4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 52
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRLP4 52
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
CNSTF4 1065353216
ADDRLP4 52
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ARGF4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_CM_LerpTag
CALLI4
pop
line 246
;243:		1.0 - parent->backlerp, tagName );
;244:
;245:	// FIXME: allow origin offsets along tag?
;246:	VectorCopy( parent->origin, entity->origin );
ADDRLP4 56
CNSTI4 68
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 247
;247:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $136
line 248
;248:		VectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 68
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 249
;249:	}
LABELV $137
line 247
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $136
line 252
;250:
;251:	// cast away const because of compiler problems
;252:	MatrixMultiply( lerped.axis, ((refEntity_t*)parent)->axis, entity->axis );
ADDRLP4 4+12
ARGP4
ADDRLP4 60
CNSTI4 28
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 60
INDIRI4
ADDP
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 253
;253:	entity->backlerp = parent->backlerp;
ADDRLP4 64
CNSTI4 100
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRF4
ASGNF4
line 254
;254:}
LABELV $135
endproc UI_PositionEntityOnTag 84 24
proc UI_PositionRotatedEntityOnTag 120 24
line 263
;255:
;256:
;257:/*
;258:======================
;259:UI_PositionRotatedEntityOnTag
;260:======================
;261:*/
;262:static void UI_PositionRotatedEntityOnTag( refEntity_t *entity, const refEntity_t *parent, 
;263:							clipHandle_t parentModel, char *tagName ) {
line 269
;264:	int				i;
;265:	orientation_t	lerped;
;266:	vec3_t			tempAxis[3];
;267:
;268:	// lerp the tag
;269:	trap_CM_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,
ADDRLP4 4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 88
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRLP4 88
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
CNSTF4 1065353216
ADDRLP4 88
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ARGF4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_CM_LerpTag
CALLI4
pop
line 273
;270:		1.0 - parent->backlerp, tagName );
;271:
;272:	// FIXME: allow origin offsets along tag?
;273:	VectorCopy( parent->origin, entity->origin );
ADDRLP4 92
CNSTI4 68
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 274
;274:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $142
line 275
;275:		VectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );
ADDRLP4 96
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 112
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 112
INDIRP4
ADDRLP4 112
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 276
;276:	}
LABELV $143
line 274
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $142
line 279
;277:
;278:	// cast away const because of compiler problems
;279:	MatrixMultiply( entity->axis, ((refEntity_t *)parent)->axis, tempAxis );
ADDRLP4 96
CNSTI4 28
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 96
INDIRI4
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ADDRLP4 96
INDIRI4
ADDP
ARGP4
ADDRLP4 52
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 280
;280:	MatrixMultiply( lerped.axis, tempAxis, entity->axis );
ADDRLP4 4+12
ARGP4
ADDRLP4 52
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 281
;281:}
LABELV $141
endproc UI_PositionRotatedEntityOnTag 120 24
proc UI_SetLerpFrameAnimation 12 8
line 289
;282:
;283:
;284:/*
;285:===============
;286:UI_SetLerpFrameAnimation
;287:===============
;288:*/
;289:static void UI_SetLerpFrameAnimation( playerInfo_t *ci, lerpFrame_t *lf, int newAnimation ) {
line 292
;290:	animation_t	*anim;
;291:
;292:	lf->animationNumber = newAnimation;
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 293
;293:	newAnimation &= ~ANIM_TOGGLEBIT;
ADDRFP4 8
ADDRFP4 8
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 295
;294:
;295:	if ( newAnimation < 0 || newAnimation >= MAX_ANIMATIONS ) {
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $150
ADDRLP4 4
INDIRI4
CNSTI4 31
LTI4 $148
LABELV $150
line 296
;296:		trap_Error( va("Bad animation number: %i", newAnimation) );
ADDRGP4 $151
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_Error
CALLV
pop
line 297
;297:	}
LABELV $148
line 299
;298:
;299:	anim = &ci->animations[ newAnimation ];
ADDRLP4 0
CNSTI4 28
ADDRFP4 8
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDP4
ASGNP4
line 301
;300:
;301:	lf->animation = anim;
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 302
;302:	lf->animationTime = lf->frameTime + anim->initialLerp;
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDI4
ASGNI4
line 303
;303:}
LABELV $147
endproc UI_SetLerpFrameAnimation 12 8
proc UI_RunLerpFrame 32 12
line 311
;304:
;305:
;306:/*
;307:===============
;308:UI_RunLerpFrame
;309:===============
;310:*/
;311:static void UI_RunLerpFrame( playerInfo_t *ci, lerpFrame_t *lf, int newAnimation ) {
line 316
;312:	int			f;
;313:	animation_t	*anim;
;314:
;315:	// see if the animation sequence is switching
;316:	if ( newAnimation != lf->animationNumber || !lf->animation ) {
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
NEI4 $155
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $153
LABELV $155
line 317
;317:		UI_SetLerpFrameAnimation( ci, lf, newAnimation );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 UI_SetLerpFrameAnimation
CALLV
pop
line 318
;318:	}
LABELV $153
line 322
;319:
;320:	// if we have passed the current frame, move it to
;321:	// oldFrame and calculate a new frame
;322:	if ( dp_realtime >= lf->frameTime ) {
ADDRGP4 dp_realtime
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
LTI4 $156
line 323
;323:		lf->oldFrame = lf->frame;
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 324
;324:		lf->oldFrameTime = lf->frameTime;
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 327
;325:
;326:		// get the next frame based on the animation
;327:		anim = lf->animation;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
ASGNP4
line 328
;328:		if ( dp_realtime < lf->animationTime ) {
ADDRGP4 dp_realtime
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
GEI4 $158
line 329
;329:			lf->frameTime = lf->animationTime;		// initial lerp
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
line 330
;330:		} else {
ADDRGP4 $159
JUMPV
LABELV $158
line 331
;331:			lf->frameTime = lf->oldFrameTime + anim->frameLerp;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
CNSTI4 12
ASGNI4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRI4
ADDI4
ASGNI4
line 332
;332:		}
LABELV $159
line 333
;333:		f = ( lf->frameTime - lf->animationTime ) / anim->frameLerp;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
CNSTI4 12
ASGNI4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
SUBI4
ADDRLP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRI4
DIVI4
ASGNI4
line 334
;334:		if ( f >= anim->numFrames ) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
LTI4 $160
line 335
;335:			f -= anim->numFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 336
;336:			if ( anim->loopFrames ) {
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
EQI4 $162
line 337
;337:				f %= anim->loopFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
MODI4
ASGNI4
line 338
;338:				f += anim->numFrames - anim->loopFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
ADDI4
ASGNI4
line 339
;339:			} else {
ADDRGP4 $163
JUMPV
LABELV $162
line 340
;340:				f = anim->numFrames - 1;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 343
;341:				// the animation is stuck at the end, so it
;342:				// can immediately transition to another sequence
;343:				lf->frameTime = dp_realtime;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 dp_realtime
INDIRI4
ASGNI4
line 344
;344:			}
LABELV $163
line 345
;345:		}
LABELV $160
line 346
;346:		lf->frame = anim->firstFrame + f;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 347
;347:		if ( dp_realtime > lf->frameTime ) {
ADDRGP4 dp_realtime
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
LEI4 $164
line 348
;348:			lf->frameTime = dp_realtime;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 dp_realtime
INDIRI4
ASGNI4
line 349
;349:		}
LABELV $164
line 350
;350:	}
LABELV $156
line 352
;351:
;352:	if ( lf->frameTime > dp_realtime + 200 ) {
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 dp_realtime
INDIRI4
CNSTI4 200
ADDI4
LEI4 $166
line 353
;353:		lf->frameTime = dp_realtime;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 dp_realtime
INDIRI4
ASGNI4
line 354
;354:	}
LABELV $166
line 356
;355:
;356:	if ( lf->oldFrameTime > dp_realtime ) {
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRGP4 dp_realtime
INDIRI4
LEI4 $168
line 357
;357:		lf->oldFrameTime = dp_realtime;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 dp_realtime
INDIRI4
ASGNI4
line 358
;358:	}
LABELV $168
line 360
;359:	// calculate current lerp value
;360:	if ( lf->frameTime == lf->oldFrameTime ) {
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
NEI4 $170
line 361
;361:		lf->backlerp = 0;
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 0
ASGNF4
line 362
;362:	} else {
ADDRGP4 $171
JUMPV
LABELV $170
line 363
;363:		lf->backlerp = 1.0 - (float)( dp_realtime - lf->oldFrameTime ) / ( lf->frameTime - lf->oldFrameTime );
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 1065353216
ADDRGP4 dp_realtime
INDIRI4
ADDRLP4 20
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
SUBI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 364
;364:	}
LABELV $171
line 365
;365:}
LABELV $152
endproc UI_RunLerpFrame 32 12
proc UI_PlayerAnimation 16 12
line 374
;366:
;367:
;368:/*
;369:===============
;370:UI_PlayerAnimation
;371:===============
;372:*/
;373:static void UI_PlayerAnimation( playerInfo_t *pi, int *legsOld, int *legs, float *legsBackLerp,
;374:						int *torsoOld, int *torso, float *torsoBackLerp ) {
line 377
;375:
;376:	// legs animation
;377:	pi->legsAnimationTimer -= uis.frametime;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRGP4 uis
INDIRI4
SUBI4
ASGNI4
line 378
;378:	if ( pi->legsAnimationTimer < 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
INDIRI4
CNSTI4 0
GEI4 $173
line 379
;379:		pi->legsAnimationTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1080
ADDP4
CNSTI4 0
ASGNI4
line 380
;380:	}
LABELV $173
line 382
;381:
;382:	UI_LegsSequencing( pi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 UI_LegsSequencing
CALLV
pop
line 384
;383:
;384:	if ( pi->legs.yawing && ( pi->legsAnim & ~ANIM_TOGGLEBIT ) == LEGS_IDLE ) {
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CNSTI4 0
EQI4 $175
ADDRLP4 4
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
CNSTI4 22
NEI4 $175
line 385
;385:		UI_RunLerpFrame( pi, &pi->legs, LEGS_TURN );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ARGP4
CNSTI4 24
ARGI4
ADDRGP4 UI_RunLerpFrame
CALLV
pop
line 386
;386:	} else {
ADDRGP4 $176
JUMPV
LABELV $175
line 387
;387:		UI_RunLerpFrame( pi, &pi->legs, pi->legsAnim );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_RunLerpFrame
CALLV
pop
line 388
;388:	}
LABELV $176
line 389
;389:	*legsOld = pi->legs.oldFrame;
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 390
;390:	*legs = pi->legs.frame;
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 391
;391:	*legsBackLerp = pi->legs.backlerp;
ADDRFP4 12
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 394
;392:
;393:	// torso animation
;394:	pi->torsoAnimationTimer -= uis.frametime;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
ADDRGP4 uis
INDIRI4
SUBI4
ASGNI4
line 395
;395:	if ( pi->torsoAnimationTimer < 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
INDIRI4
CNSTI4 0
GEI4 $177
line 396
;396:		pi->torsoAnimationTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1072
ADDP4
CNSTI4 0
ASGNI4
line 397
;397:	}
LABELV $177
line 399
;398:
;399:	UI_TorsoSequencing( pi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 UI_TorsoSequencing
CALLV
pop
line 401
;400:
;401:	UI_RunLerpFrame( pi, &pi->torso, pi->torsoAnim );
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 64
ADDP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 1048
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_RunLerpFrame
CALLV
pop
line 402
;402:	*torsoOld = pi->torso.oldFrame;
ADDRFP4 16
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
ASGNI4
line 403
;403:	*torso = pi->torso.frame;
ADDRFP4 20
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
ASGNI4
line 404
;404:	*torsoBackLerp = pi->torso.backlerp;
ADDRFP4 24
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ASGNF4
line 405
;405:}
LABELV $172
endproc UI_PlayerAnimation 16 12
proc UI_SwingAngles 28 8
line 414
;406:
;407:
;408:/*
;409:==================
;410:UI_SwingAngles
;411:==================
;412:*/
;413:static void UI_SwingAngles( float destination, float swingTolerance, float clampTolerance,
;414:					float speed, float *angle, qboolean *swinging ) {
line 419
;415:	float	swing;
;416:	float	move;
;417:	float	scale;
;418:
;419:	if ( !*swinging ) {
ADDRFP4 20
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $180
line 421
;420:		// see if a swing should be started
;421:		swing = AngleSubtract( *angle, destination );
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 12
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ASGNF4
line 422
;422:		if ( swing > swingTolerance || swing < -swingTolerance ) {
ADDRLP4 20
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRF4
GTF4 $184
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRF4
NEGF4
GEF4 $182
LABELV $184
line 423
;423:			*swinging = qtrue;
ADDRFP4 20
INDIRP4
CNSTI4 1
ASGNI4
line 424
;424:		}
LABELV $182
line 425
;425:	}
LABELV $180
line 427
;426:
;427:	if ( !*swinging ) {
ADDRFP4 20
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $185
line 428
;428:		return;
ADDRGP4 $179
JUMPV
LABELV $185
line 433
;429:	}
;430:	
;431:	// modify the speed depending on the delta
;432:	// so it doesn't seem so linear
;433:	swing = AngleSubtract( destination, *angle );
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 12
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ASGNF4
line 434
;434:	scale = fabs( swing );
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 16
INDIRF4
ASGNF4
line 435
;435:	if ( scale < swingTolerance * 0.5 ) {
ADDRLP4 4
INDIRF4
CNSTF4 1056964608
ADDRFP4 4
INDIRF4
MULF4
GEF4 $187
line 436
;436:		scale = 0.5;
ADDRLP4 4
CNSTF4 1056964608
ASGNF4
line 437
;437:	} else if ( scale < swingTolerance ) {
ADDRGP4 $188
JUMPV
LABELV $187
ADDRLP4 4
INDIRF4
ADDRFP4 4
INDIRF4
GEF4 $189
line 438
;438:		scale = 1.0;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 439
;439:	} else {
ADDRGP4 $190
JUMPV
LABELV $189
line 440
;440:		scale = 2.0;
ADDRLP4 4
CNSTF4 1073741824
ASGNF4
line 441
;441:	}
LABELV $190
LABELV $188
line 444
;442:
;443:	// swing towards the destination angle
;444:	if ( swing >= 0 ) {
ADDRLP4 0
INDIRF4
CNSTF4 0
LTF4 $191
line 445
;445:		move = uis.frametime * scale * speed;
ADDRLP4 8
ADDRGP4 uis
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
MULF4
ADDRFP4 12
INDIRF4
MULF4
ASGNF4
line 446
;446:		if ( move >= swing ) {
ADDRLP4 8
INDIRF4
ADDRLP4 0
INDIRF4
LTF4 $193
line 447
;447:			move = swing;
ADDRLP4 8
ADDRLP4 0
INDIRF4
ASGNF4
line 448
;448:			*swinging = qfalse;
ADDRFP4 20
INDIRP4
CNSTI4 0
ASGNI4
line 449
;449:		}
LABELV $193
line 450
;450:		*angle = AngleMod( *angle + move );
ADDRLP4 20
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 8
INDIRF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 451
;451:	} else if ( swing < 0 ) {
ADDRGP4 $192
JUMPV
LABELV $191
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $195
line 452
;452:		move = uis.frametime * scale * -speed;
ADDRLP4 8
ADDRGP4 uis
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
MULF4
ADDRFP4 12
INDIRF4
NEGF4
MULF4
ASGNF4
line 453
;453:		if ( move <= swing ) {
ADDRLP4 8
INDIRF4
ADDRLP4 0
INDIRF4
GTF4 $197
line 454
;454:			move = swing;
ADDRLP4 8
ADDRLP4 0
INDIRF4
ASGNF4
line 455
;455:			*swinging = qfalse;
ADDRFP4 20
INDIRP4
CNSTI4 0
ASGNI4
line 456
;456:		}
LABELV $197
line 457
;457:		*angle = AngleMod( *angle + move );
ADDRLP4 20
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 8
INDIRF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 458
;458:	}
LABELV $195
LABELV $192
line 461
;459:
;460:	// clamp to no more than tolerance
;461:	swing = AngleSubtract( destination, *angle );
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 20
INDIRF4
ASGNF4
line 462
;462:	if ( swing > clampTolerance ) {
ADDRLP4 0
INDIRF4
ADDRFP4 8
INDIRF4
LEF4 $199
line 463
;463:		*angle = AngleMod( destination - (clampTolerance - 1) );
ADDRFP4 0
INDIRF4
ADDRFP4 8
INDIRF4
CNSTF4 1065353216
SUBF4
SUBF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 16
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 464
;464:	} else if ( swing < -clampTolerance ) {
ADDRGP4 $200
JUMPV
LABELV $199
ADDRLP4 0
INDIRF4
ADDRFP4 8
INDIRF4
NEGF4
GEF4 $201
line 465
;465:		*angle = AngleMod( destination + (clampTolerance - 1) );
ADDRFP4 0
INDIRF4
ADDRFP4 8
INDIRF4
CNSTF4 1065353216
SUBF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 16
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 466
;466:	}
LABELV $201
LABELV $200
line 467
;467:}
LABELV $179
endproc UI_SwingAngles 28 8
proc UI_MovedirAdjustment 72 16
line 475
;468:
;469:
;470:/*
;471:======================
;472:UI_MovedirAdjustment
;473:======================
;474:*/
;475:static float UI_MovedirAdjustment( playerInfo_t *pi ) {
line 479
;476:	vec3_t		relativeAngles;
;477:	vec3_t		moveVector;
;478:
;479:	VectorSubtract( pi->viewAngles, pi->moveAngles, relativeAngles );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 24
INDIRP4
CNSTI4 1016
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 1028
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 24
INDIRP4
CNSTI4 1020
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 1032
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12+8
ADDRLP4 28
INDIRP4
CNSTI4 1024
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 1036
ADDP4
INDIRF4
SUBF4
ASGNF4
line 480
;480:	AngleVectors( relativeAngles, moveVector, NULL, NULL );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 32
CNSTP4 0
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 481
;481:	if ( Q_fabs( moveVector[0] ) < 0.01 ) {
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 36
ADDRGP4 Q_fabs
CALLF4
ASGNF4
ADDRLP4 36
INDIRF4
CNSTF4 1008981770
GEF4 $206
line 482
;482:		moveVector[0] = 0.0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 483
;483:	}
LABELV $206
line 484
;484:	if ( Q_fabs( moveVector[1] ) < 0.01 ) {
ADDRLP4 0+4
INDIRF4
ARGF4
ADDRLP4 40
ADDRGP4 Q_fabs
CALLF4
ASGNF4
ADDRLP4 40
INDIRF4
CNSTF4 1008981770
GEF4 $208
line 485
;485:		moveVector[1] = 0.0;
ADDRLP4 0+4
CNSTF4 0
ASGNF4
line 486
;486:	}
LABELV $208
line 488
;487:
;488:	if ( moveVector[1] == 0 && moveVector[0] > 0 ) {
ADDRLP4 44
CNSTF4 0
ASGNF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44
INDIRF4
NEF4 $212
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRF4
LEF4 $212
line 489
;489:		return 0;
CNSTF4 0
RETF4
ADDRGP4 $203
JUMPV
LABELV $212
line 491
;490:	}
;491:	if ( moveVector[1] < 0 && moveVector[0] > 0 ) {
ADDRLP4 48
CNSTF4 0
ASGNF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 48
INDIRF4
GEF4 $215
ADDRLP4 0
INDIRF4
ADDRLP4 48
INDIRF4
LEF4 $215
line 492
;492:		return 22;
CNSTF4 1102053376
RETF4
ADDRGP4 $203
JUMPV
LABELV $215
line 494
;493:	}
;494:	if ( moveVector[1] < 0 && moveVector[0] == 0 ) {
ADDRLP4 52
CNSTF4 0
ASGNF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 52
INDIRF4
GEF4 $218
ADDRLP4 0
INDIRF4
ADDRLP4 52
INDIRF4
NEF4 $218
line 495
;495:		return 45;
CNSTF4 1110704128
RETF4
ADDRGP4 $203
JUMPV
LABELV $218
line 497
;496:	}
;497:	if ( moveVector[1] < 0 && moveVector[0] < 0 ) {
ADDRLP4 56
CNSTF4 0
ASGNF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 56
INDIRF4
GEF4 $221
ADDRLP4 0
INDIRF4
ADDRLP4 56
INDIRF4
GEF4 $221
line 498
;498:		return -22;
CNSTF4 3249537024
RETF4
ADDRGP4 $203
JUMPV
LABELV $221
line 500
;499:	}
;500:	if ( moveVector[1] == 0 && moveVector[0] < 0 ) {
ADDRLP4 60
CNSTF4 0
ASGNF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 60
INDIRF4
NEF4 $224
ADDRLP4 0
INDIRF4
ADDRLP4 60
INDIRF4
GEF4 $224
line 501
;501:		return 0;
CNSTF4 0
RETF4
ADDRGP4 $203
JUMPV
LABELV $224
line 503
;502:	}
;503:	if ( moveVector[1] > 0 && moveVector[0] < 0 ) {
ADDRLP4 64
CNSTF4 0
ASGNF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 64
INDIRF4
LEF4 $227
ADDRLP4 0
INDIRF4
ADDRLP4 64
INDIRF4
GEF4 $227
line 504
;504:		return 22;
CNSTF4 1102053376
RETF4
ADDRGP4 $203
JUMPV
LABELV $227
line 506
;505:	}
;506:	if ( moveVector[1] > 0 && moveVector[0] == 0 ) {
ADDRLP4 68
CNSTF4 0
ASGNF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 68
INDIRF4
LEF4 $230
ADDRLP4 0
INDIRF4
ADDRLP4 68
INDIRF4
NEF4 $230
line 507
;507:		return  -45;
CNSTF4 3258187776
RETF4
ADDRGP4 $203
JUMPV
LABELV $230
line 510
;508:	}
;509:
;510:	return -22;
CNSTF4 3249537024
RETF4
LABELV $203
endproc UI_MovedirAdjustment 72 16
proc UI_PlayerAngles 80 24
line 519
;511:}
;512:
;513:
;514:/*
;515:===============
;516:UI_PlayerAngles
;517:===============
;518:*/
;519:static void UI_PlayerAngles( playerInfo_t *pi, vec3_t legs[3], vec3_t torso[3], vec3_t head[3] ) {
line 524
;520:	vec3_t		legsAngles, torsoAngles, headAngles;
;521:	float		dest;
;522:	float		adjust;
;523:
;524:	VectorCopy( pi->viewAngles, headAngles );
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 1016
ADDP4
INDIRB
ASGNB 12
line 525
;525:	headAngles[YAW] = AngleMod( headAngles[YAW] );
ADDRLP4 12+4
INDIRF4
ARGF4
ADDRLP4 44
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 44
INDIRF4
ASGNF4
line 526
;526:	VectorClear( legsAngles );
ADDRLP4 48
CNSTF4 0
ASGNF4
ADDRLP4 24+8
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 24
ADDRLP4 48
INDIRF4
ASGNF4
line 527
;527:	VectorClear( torsoAngles );
ADDRLP4 52
CNSTF4 0
ASGNF4
ADDRLP4 0+8
ADDRLP4 52
INDIRF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 52
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 52
INDIRF4
ASGNF4
line 532
;528:
;529:	// --------- yaw -------------
;530:
;531:	// allow yaw to drift a bit
;532:	if ( ( pi->legsAnim & ~ANIM_TOGGLEBIT ) != LEGS_IDLE 
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
CNSTI4 -129
ASGNI4
ADDRLP4 56
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 22
NEI4 $242
ADDRLP4 56
INDIRP4
CNSTI4 1048
ADDP4
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 11
EQI4 $240
LABELV $242
line 533
;533:		|| ( pi->torsoAnim & ~ANIM_TOGGLEBIT ) != TORSO_STAND  ) {
line 535
;534:		// if not standing still, always point all in the same direction
;535:		pi->torso.yawing = qtrue;	// always center
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 1
ASGNI4
line 536
;536:		pi->torso.pitching = qtrue;	// always center
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTI4 1
ASGNI4
line 537
;537:		pi->legs.yawing = qtrue;	// always center
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 1
ASGNI4
line 538
;538:	}
LABELV $240
line 541
;539:
;540:	// adjust legs for movement dir
;541:	adjust = UI_MovedirAdjustment( pi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 UI_MovedirAdjustment
CALLF4
ASGNF4
ADDRLP4 36
ADDRLP4 64
INDIRF4
ASGNF4
line 542
;542:	legsAngles[YAW] = headAngles[YAW] + adjust;
ADDRLP4 24+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 36
INDIRF4
ADDF4
ASGNF4
line 543
;543:	torsoAngles[YAW] = headAngles[YAW] + 0.25 * adjust;
ADDRLP4 0+4
ADDRLP4 12+4
INDIRF4
CNSTF4 1048576000
ADDRLP4 36
INDIRF4
MULF4
ADDF4
ASGNF4
line 547
;544:
;545:
;546:	// torso
;547:	UI_SwingAngles( torsoAngles[YAW], 25, 90, SWINGSPEED, &pi->torso.yawAngle, &pi->torso.yawing );
ADDRLP4 0+4
INDIRF4
ARGF4
CNSTF4 1103626240
ARGF4
CNSTF4 1119092736
ARGF4
CNSTF4 1050253722
ARGF4
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 84
ADDP4
ARGP4
ADDRLP4 68
INDIRP4
CNSTI4 88
ADDP4
ARGP4
ADDRGP4 UI_SwingAngles
CALLV
pop
line 548
;548:	UI_SwingAngles( legsAngles[YAW], 40, 90, SWINGSPEED, &pi->legs.yawAngle, &pi->legs.yawing );
ADDRLP4 24+4
INDIRF4
ARGF4
CNSTF4 1109393408
ARGF4
CNSTF4 1119092736
ARGF4
CNSTF4 1050253722
ARGF4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 UI_SwingAngles
CALLV
pop
line 550
;549:
;550:	torsoAngles[YAW] = pi->torso.yawAngle;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ASGNF4
line 551
;551:	legsAngles[YAW] = pi->legs.yawAngle;
ADDRLP4 24+4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ASGNF4
line 556
;552:
;553:	// --------- pitch -------------
;554:
;555:	// only show a fraction of the pitch angle in the torso
;556:	if ( headAngles[PITCH] > 180 ) {
ADDRLP4 12
INDIRF4
CNSTF4 1127481344
LEF4 $251
line 557
;557:		dest = (-360 + headAngles[PITCH]) * 0.75;
ADDRLP4 40
CNSTF4 1061158912
ADDRLP4 12
INDIRF4
CNSTF4 3283353600
ADDF4
MULF4
ASGNF4
line 558
;558:	} else {
ADDRGP4 $252
JUMPV
LABELV $251
line 559
;559:		dest = headAngles[PITCH] * 0.75;
ADDRLP4 40
CNSTF4 1061158912
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 560
;560:	}
LABELV $252
line 561
;561:	UI_SwingAngles( dest, 15, 30, 0.1f, &pi->torso.pitchAngle, &pi->torso.pitching );
ADDRLP4 40
INDIRF4
ARGF4
CNSTF4 1097859072
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1036831949
ARGF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 96
ADDP4
ARGP4
ADDRGP4 UI_SwingAngles
CALLV
pop
line 562
;562:	torsoAngles[PITCH] = pi->torso.pitchAngle;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ASGNF4
line 565
;563:
;564:	// pull the angles back out of the hierarchial chain
;565:	AnglesSubtract( headAngles, torsoAngles, headAngles );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 AnglesSubtract
CALLV
pop
line 566
;566:	AnglesSubtract( torsoAngles, legsAngles, torsoAngles );
ADDRLP4 0
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 AnglesSubtract
CALLV
pop
line 567
;567:	AnglesToAxis( legsAngles, legs );
ADDRLP4 24
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 568
;568:	AnglesToAxis( torsoAngles, torso );
ADDRLP4 0
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 569
;569:	AnglesToAxis( headAngles, head );
ADDRLP4 12
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 570
;570:}
LABELV $233
endproc UI_PlayerAngles 80 24
proc UI_PlayerFloatSprite 140 12
line 578
;571:
;572:
;573:/*
;574:===============
;575:UI_PlayerFloatSprite
;576:===============
;577:*/
;578:static void UI_PlayerFloatSprite( playerInfo_t *pi, vec3_t origin, qhandle_t shader ) {
line 581
;579:	refEntity_t		ent;
;580:
;581:	memset( &ent, 0, sizeof( ent ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 582
;582:	VectorCopy( origin, ent.origin );
ADDRLP4 0+68
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 583
;583:	ent.origin[2] += 48;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1111490560
ADDF4
ASGNF4
line 584
;584:	ent.reType = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 585
;585:	ent.customShader = shader;
ADDRLP4 0+112
ADDRFP4 8
INDIRI4
ASGNI4
line 586
;586:	ent.radius = 10;
ADDRLP4 0+132
CNSTF4 1092616192
ASGNF4
line 587
;587:	ent.renderfx = 0;
ADDRLP4 0+4
CNSTI4 0
ASGNI4
line 588
;588:	trap_R_AddRefEntityToScene( &ent );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 589
;589:}
LABELV $253
endproc UI_PlayerFloatSprite 140 12
export UI_MachinegunSpinAngle
proc UI_MachinegunSpinAngle 28 4
line 597
;590:
;591:
;592:/*
;593:======================
;594:UI_MachinegunSpinAngle
;595:======================
;596:*/
;597:float	UI_MachinegunSpinAngle( playerInfo_t *pi ) {
line 603
;598:	int		delta;
;599:	float	angle;
;600:	float	speed;
;601:	int		torsoAnim;
;602:
;603:	delta = dp_realtime - pi->barrelTime;
ADDRLP4 4
ADDRGP4 dp_realtime
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1100
ADDP4
INDIRI4
SUBI4
ASGNI4
line 604
;604:	if ( pi->barrelSpinning ) {
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
INDIRI4
CNSTI4 0
EQI4 $261
line 605
;605:		angle = pi->barrelAngle + delta * SPIN_SPEED;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 1096
ADDP4
INDIRF4
CNSTF4 1063675494
ADDRLP4 4
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 606
;606:	} else {
ADDRGP4 $262
JUMPV
LABELV $261
line 607
;607:		if ( delta > COAST_TIME ) {
ADDRLP4 4
INDIRI4
CNSTI4 1000
LEI4 $263
line 608
;608:			delta = COAST_TIME;
ADDRLP4 4
CNSTI4 1000
ASGNI4
line 609
;609:		}
LABELV $263
line 611
;610:
;611:		speed = 0.5 * ( SPIN_SPEED + (float)( COAST_TIME - delta ) / COAST_TIME );
ADDRLP4 12
CNSTF4 1056964608
CNSTI4 1000
ADDRLP4 4
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1148846080
DIVF4
CNSTF4 1063675494
ADDF4
MULF4
ASGNF4
line 612
;612:		angle = pi->barrelAngle + delta * speed;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 1096
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 613
;613:	}
LABELV $262
line 615
;614:
;615:	torsoAnim = pi->torsoAnim  & ~ANIM_TOGGLEBIT;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1048
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 616
;616:	if( torsoAnim == TORSO_ATTACK2 ) {
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $265
line 617
;617:		torsoAnim = TORSO_ATTACK;
ADDRLP4 0
CNSTI4 7
ASGNI4
line 618
;618:	}
LABELV $265
line 619
;619:	if ( pi->barrelSpinning == !(torsoAnim == TORSO_ATTACK) ) {
ADDRLP4 0
INDIRI4
CNSTI4 7
EQI4 $270
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRGP4 $271
JUMPV
LABELV $270
ADDRLP4 16
CNSTI4 0
ASGNI4
LABELV $271
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $267
line 620
;620:		pi->barrelTime = dp_realtime;
ADDRFP4 0
INDIRP4
CNSTI4 1100
ADDP4
ADDRGP4 dp_realtime
INDIRI4
ASGNI4
line 621
;621:		pi->barrelAngle = AngleMod( angle );
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 1096
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 622
;622:		pi->barrelSpinning = !!(torsoAnim == TORSO_ATTACK);
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $273
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $274
JUMPV
LABELV $273
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $274
ADDRFP4 0
INDIRP4
CNSTI4 1092
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 623
;623:	}
LABELV $267
line 625
;624:
;625:	return angle;
ADDRLP4 8
INDIRF4
RETF4
LABELV $260
endproc UI_MachinegunSpinAngle 28 4
lit
align 4
LABELV $276
byte 4 3246391296
byte 4 3246391296
byte 4 3250585600
align 4
LABELV $277
byte 4 1098907648
byte 4 1098907648
byte 4 1107296256
export UI_DrawPlayer
code
proc UI_DrawPlayer 1008 28
line 634
;626:}
;627:
;628:
;629:/*
;630:===============
;631:UI_DrawPlayer
;632:===============
;633:*/
;634:void UI_DrawPlayer( float x, float y, float w, float h, playerInfo_t *pi, int time ) {
line 642
;635:	refdef_t		refdef;
;636:	refEntity_t		legs;
;637:	refEntity_t		torso;
;638:	refEntity_t		head;
;639:	refEntity_t		gun;
;640:	vec3_t			origin;
;641:	int				renderfx;
;642:	vec3_t			mins = {-16, -16, -24};
ADDRLP4 804
ADDRGP4 $276
INDIRB
ASGNB 12
line 643
;643:	vec3_t			maxs = {16, 16, 32};
ADDRLP4 816
ADDRGP4 $277
INDIRB
ASGNB 12
line 647
;644:	float			len;
;645:	float			xx;
;646:
;647:	if ( !pi->legsModel || !pi->torsoModel || !pi->headModel || !pi->animations[0].numFrames ) {
ADDRLP4 976
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 980
CNSTI4 0
ASGNI4
ADDRLP4 976
INDIRP4
INDIRI4
ADDRLP4 980
INDIRI4
EQI4 $282
ADDRLP4 976
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ADDRLP4 980
INDIRI4
EQI4 $282
ADDRLP4 976
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ADDRLP4 980
INDIRI4
EQI4 $282
ADDRLP4 976
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
ADDRLP4 980
INDIRI4
NEI4 $278
LABELV $282
line 648
;648:		return;
ADDRGP4 $275
JUMPV
LABELV $278
line 651
;649:	}
;650:
;651:	dp_realtime = time;
ADDRGP4 dp_realtime
ADDRFP4 20
INDIRI4
ASGNI4
line 653
;652:
;653:	if ( pi->pendingWeapon != -1 && dp_realtime > pi->weaponTimer ) {
ADDRLP4 984
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 984
INDIRP4
CNSTI4 1060
ADDP4
INDIRI4
CNSTI4 -1
EQI4 $283
ADDRGP4 dp_realtime
INDIRI4
ADDRLP4 984
INDIRP4
CNSTI4 1064
ADDP4
INDIRI4
LEI4 $283
line 654
;654:		pi->weapon = pi->pendingWeapon;
ADDRLP4 988
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 988
INDIRP4
CNSTI4 1052
ADDP4
ADDRLP4 988
INDIRP4
CNSTI4 1060
ADDP4
INDIRI4
ASGNI4
line 655
;655:		pi->lastWeapon = pi->pendingWeapon;
ADDRLP4 992
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 992
INDIRP4
CNSTI4 1056
ADDP4
ADDRLP4 992
INDIRP4
CNSTI4 1060
ADDP4
INDIRI4
ASGNI4
line 656
;656:		pi->pendingWeapon = -1;
ADDRFP4 16
INDIRP4
CNSTI4 1060
ADDP4
CNSTI4 -1
ASGNI4
line 657
;657:		pi->weaponTimer = 0;
ADDRFP4 16
INDIRP4
CNSTI4 1064
ADDP4
CNSTI4 0
ASGNI4
line 658
;658:		if( pi->currentWeapon != pi->weapon ) {
ADDRLP4 996
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 996
INDIRP4
CNSTI4 1040
ADDP4
INDIRI4
ADDRLP4 996
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
EQI4 $285
line 659
;659:			trap_S_StartLocalSound( weaponChangeSound, CHAN_LOCAL );
ADDRGP4 weaponChangeSound
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 660
;660:		}
LABELV $285
line 661
;661:	}
LABELV $283
line 663
;662:
;663:	UI_AdjustFrom640( &x, &y, &w, &h );
ADDRFP4 0
ARGP4
ADDRFP4 4
ARGP4
ADDRFP4 8
ARGP4
ADDRFP4 12
ARGP4
ADDRGP4 UI_AdjustFrom640
CALLV
pop
line 665
;664:
;665:	y -= jumpHeight;
ADDRFP4 4
ADDRFP4 4
INDIRF4
ADDRGP4 jumpHeight
INDIRF4
SUBF4
ASGNF4
line 667
;666:
;667:	memset( &refdef, 0, sizeof( refdef ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 368
ARGI4
ADDRGP4 memset
CALLP4
pop
line 668
;668:	memset( &legs, 0, sizeof(legs) );
ADDRLP4 368
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 669
;669:	memset( &torso, 0, sizeof(torso) );
ADDRLP4 520
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 670
;670:	memset( &head, 0, sizeof(head) );
ADDRLP4 660
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 672
;671:
;672:	refdef.rdflags = RDF_NOWORLDMODEL;
ADDRLP4 0+76
CNSTI4 1
ASGNI4
line 674
;673:
;674:	AxisClear( refdef.viewaxis );
ADDRLP4 0+36
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 676
;675:
;676:	refdef.x = x;
ADDRLP4 0
ADDRFP4 0
INDIRF4
CVFI4 4
ASGNI4
line 677
;677:	refdef.y = y;
ADDRLP4 0+4
ADDRFP4 4
INDIRF4
CVFI4 4
ASGNI4
line 678
;678:	refdef.width = w;
ADDRLP4 0+8
ADDRFP4 8
INDIRF4
CVFI4 4
ASGNI4
line 679
;679:	refdef.height = h;
ADDRLP4 0+12
ADDRFP4 12
INDIRF4
CVFI4 4
ASGNI4
line 681
;680:
;681:	refdef.fov_x = (int)((float)refdef.width / 640.0f * 90.0f);
ADDRLP4 0+16
CNSTF4 1119092736
ADDRLP4 0+8
INDIRI4
CVIF4 4
CNSTF4 1142947840
DIVF4
MULF4
CVFI4 4
CVIF4 4
ASGNF4
line 682
;682:	xx = refdef.width / tan( refdef.fov_x / 360 * M_PI );
CNSTF4 1078530011
ADDRLP4 0+16
INDIRF4
CNSTF4 1135869952
DIVF4
MULF4
ARGF4
ADDRLP4 988
ADDRGP4 tan
CALLF4
ASGNF4
ADDRLP4 972
ADDRLP4 0+8
INDIRI4
CVIF4 4
ADDRLP4 988
INDIRF4
DIVF4
ASGNF4
line 683
;683:	refdef.fov_y = atan2( refdef.height, xx );
ADDRLP4 0+12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 972
INDIRF4
ARGF4
ADDRLP4 992
ADDRGP4 atan2
CALLF4
ASGNF4
ADDRLP4 0+20
ADDRLP4 992
INDIRF4
ASGNF4
line 684
;684:	refdef.fov_y *= ( 360 / M_PI );
ADDRLP4 0+20
CNSTF4 1122316001
ADDRLP4 0+20
INDIRF4
MULF4
ASGNF4
line 687
;685:
;686:	// calculate distance so the player nearly fills the box
;687:	len = 0.7 * ( maxs[2] - mins[2] );		
ADDRLP4 968
CNSTF4 1060320051
ADDRLP4 816+8
INDIRF4
ADDRLP4 804+8
INDIRF4
SUBF4
MULF4
ASGNF4
line 688
;688:	origin[0] = len / tan( DEG2RAD(refdef.fov_x) * 0.5 );
CNSTF4 1056964608
CNSTF4 1078530011
ADDRLP4 0+16
INDIRF4
MULF4
CNSTF4 1127481344
DIVF4
MULF4
ARGF4
ADDRLP4 996
ADDRGP4 tan
CALLF4
ASGNF4
ADDRLP4 508
ADDRLP4 968
INDIRF4
ADDRLP4 996
INDIRF4
DIVF4
ASGNF4
line 689
;689:	origin[1] = 0.5 * ( mins[1] + maxs[1] );
ADDRLP4 508+4
CNSTF4 1056964608
ADDRLP4 804+4
INDIRF4
ADDRLP4 816+4
INDIRF4
ADDF4
MULF4
ASGNF4
line 690
;690:	origin[2] = -0.5 * ( mins[2] + maxs[2] );
ADDRLP4 508+8
CNSTF4 3204448256
ADDRLP4 804+8
INDIRF4
ADDRLP4 816+8
INDIRF4
ADDF4
MULF4
ASGNF4
line 692
;691:
;692:	refdef.time = dp_realtime;
ADDRLP4 0+72
ADDRGP4 dp_realtime
INDIRI4
ASGNI4
line 694
;693:
;694:	trap_R_ClearScene();
ADDRGP4 trap_R_ClearScene
CALLV
pop
line 697
;695:
;696:	// get the rotation information
;697:	UI_PlayerAngles( pi, legs.axis, torso.axis, head.axis );
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 368+28
ARGP4
ADDRLP4 520+28
ARGP4
ADDRLP4 660+28
ARGP4
ADDRGP4 UI_PlayerAngles
CALLV
pop
line 700
;698:	
;699:	// get the animation state (after rotation, to allow feet shuffle)
;700:	UI_PlayerAnimation( pi, &legs.oldframe, &legs.frame, &legs.backlerp,
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 368+96
ARGP4
ADDRLP4 368+80
ARGP4
ADDRLP4 368+100
ARGP4
ADDRLP4 520+96
ARGP4
ADDRLP4 520+80
ARGP4
ADDRLP4 520+100
ARGP4
ADDRGP4 UI_PlayerAnimation
CALLV
pop
line 703
;701:		 &torso.oldframe, &torso.frame, &torso.backlerp );
;702:
;703:	renderfx = RF_LIGHTING_ORIGIN | RF_NOSHADOW;
ADDRLP4 800
CNSTI4 192
ASGNI4
line 708
;704:
;705:	//
;706:	// add the legs
;707:	//
;708:	legs.hModel = pi->legsModel;
ADDRLP4 368+8
ADDRFP4 16
INDIRP4
INDIRI4
ASGNI4
line 709
;709:	legs.customSkin = pi->legsSkin;
ADDRLP4 368+108
ADDRFP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 711
;710:
;711:	VectorCopy( origin, legs.origin );
ADDRLP4 368+68
ADDRLP4 508
INDIRB
ASGNB 12
line 713
;712:
;713:	VectorCopy( origin, legs.lightingOrigin );
ADDRLP4 368+12
ADDRLP4 508
INDIRB
ASGNB 12
line 714
;714:	legs.renderfx = renderfx;
ADDRLP4 368+4
ADDRLP4 800
INDIRI4
ASGNI4
line 715
;715:	VectorCopy (legs.origin, legs.oldorigin);
ADDRLP4 368+84
ADDRLP4 368+68
INDIRB
ASGNB 12
line 717
;716:
;717:	trap_R_AddRefEntityToScene( &legs );
ADDRLP4 368
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 719
;718:
;719:	if (!legs.hModel) {
ADDRLP4 368+8
INDIRI4
CNSTI4 0
NEI4 $325
line 720
;720:		return;
ADDRGP4 $275
JUMPV
LABELV $325
line 726
;721:	}
;722:
;723:	//
;724:	// add the torso
;725:	//
;726:	torso.hModel = pi->torsoModel;
ADDRLP4 520+8
ADDRFP4 16
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ASGNI4
line 727
;727:	if (!torso.hModel) {
ADDRLP4 520+8
INDIRI4
CNSTI4 0
NEI4 $329
line 728
;728:		return;
ADDRGP4 $275
JUMPV
LABELV $329
line 731
;729:	}
;730:
;731:	torso.customSkin = pi->torsoSkin;
ADDRLP4 520+108
ADDRFP4 16
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ASGNI4
line 733
;732:
;733:	VectorCopy( origin, torso.lightingOrigin );
ADDRLP4 520+12
ADDRLP4 508
INDIRB
ASGNB 12
line 735
;734:
;735:	UI_PositionRotatedEntityOnTag( &torso, &legs, pi->legsModel, "tag_torso");
ADDRLP4 520
ARGP4
ADDRLP4 368
ARGP4
ADDRFP4 16
INDIRP4
INDIRI4
ARGI4
ADDRGP4 $334
ARGP4
ADDRGP4 UI_PositionRotatedEntityOnTag
CALLV
pop
line 737
;736:
;737:	torso.renderfx = renderfx;
ADDRLP4 520+4
ADDRLP4 800
INDIRI4
ASGNI4
line 739
;738:
;739:	trap_R_AddRefEntityToScene( &torso );
ADDRLP4 520
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 744
;740:
;741:	//
;742:	// add the head
;743:	//
;744:	head.hModel = pi->headModel;
ADDRLP4 660+8
ADDRFP4 16
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ASGNI4
line 745
;745:	if (!head.hModel) {
ADDRLP4 660+8
INDIRI4
CNSTI4 0
NEI4 $337
line 746
;746:		return;
ADDRGP4 $275
JUMPV
LABELV $337
line 748
;747:	}
;748:	head.customSkin = pi->headSkin;
ADDRLP4 660+108
ADDRFP4 16
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ASGNI4
line 750
;749:
;750:	VectorCopy( origin, head.lightingOrigin );
ADDRLP4 660+12
ADDRLP4 508
INDIRB
ASGNB 12
line 752
;751:
;752:	UI_PositionRotatedEntityOnTag( &head, &torso, pi->torsoModel, "tag_head");
ADDRLP4 660
ARGP4
ADDRLP4 520
ARGP4
ADDRFP4 16
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ARGI4
ADDRGP4 $342
ARGP4
ADDRGP4 UI_PositionRotatedEntityOnTag
CALLV
pop
line 754
;753:
;754:	head.renderfx = renderfx;
ADDRLP4 660+4
ADDRLP4 800
INDIRI4
ASGNI4
line 756
;755:
;756:	trap_R_AddRefEntityToScene( &head );
ADDRLP4 660
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 761
;757:
;758:	//
;759:	// add the gun
;760:	//
;761:	if ( pi->currentWeapon != WP_HAND ) {
ADDRFP4 16
INDIRP4
CNSTI4 1040
ADDP4
INDIRI4
CNSTI4 1
EQI4 $344
line 762
;762:		memset( &gun, 0, sizeof(gun) );
ADDRLP4 828
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 763
;763:		gun.hModel = pi->weaponModel;
ADDRLP4 828+8
ADDRFP4 16
INDIRP4
CNSTI4 988
ADDP4
INDIRI4
ASGNI4
line 764
;764:		VectorCopy( origin, gun.lightingOrigin );
ADDRLP4 828+12
ADDRLP4 508
INDIRB
ASGNB 12
line 765
;765:		UI_PositionEntityOnTag( &gun, &torso, pi->torsoModel, "tag_weapon");
ADDRLP4 828
ARGP4
ADDRLP4 520
ARGP4
ADDRFP4 16
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ARGI4
ADDRGP4 $348
ARGP4
ADDRGP4 UI_PositionEntityOnTag
CALLV
pop
line 766
;766:		gun.renderfx = renderfx;
ADDRLP4 828+4
ADDRLP4 800
INDIRI4
ASGNI4
line 767
;767:		trap_R_AddRefEntityToScene( &gun );
ADDRLP4 828
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 768
;768:	}
LABELV $344
line 773
;769:
;770:	//
;771:	// add the chat icon
;772:	//
;773:	if ( pi->chat ) {
ADDRFP4 16
INDIRP4
CNSTI4 1084
ADDP4
INDIRI4
CNSTI4 0
EQI4 $350
line 774
;774:		UI_PlayerFloatSprite( pi, origin, trap_R_RegisterShaderNoMip( "sprites/balloon3" ) );
ADDRGP4 $352
ARGP4
ADDRLP4 1000
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 508
ARGP4
ADDRLP4 1000
INDIRI4
ARGI4
ADDRGP4 UI_PlayerFloatSprite
CALLV
pop
line 775
;775:	}
LABELV $350
line 780
;776:
;777:	//
;778:	// add an accent light
;779:	//
;780:	origin[0] -= 100;	// + = behind, - = in front
ADDRLP4 508
ADDRLP4 508
INDIRF4
CNSTF4 1120403456
SUBF4
ASGNF4
line 781
;781:	origin[1] += 100;	// + = left, - = right
ADDRLP4 508+4
ADDRLP4 508+4
INDIRF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 782
;782:	origin[2] += 100;	// + = above, - = below
ADDRLP4 508+8
ADDRLP4 508+8
INDIRF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 783
;783:	trap_R_AddLightToScene( origin, 500, 1.0, 1.0, 1.0 );
ADDRLP4 508
ARGP4
CNSTF4 1140457472
ARGF4
ADDRLP4 1000
CNSTF4 1065353216
ASGNF4
ADDRLP4 1000
INDIRF4
ARGF4
ADDRLP4 1000
INDIRF4
ARGF4
ADDRLP4 1000
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 785
;784:
;785:	origin[0] -= 100;
ADDRLP4 508
ADDRLP4 508
INDIRF4
CNSTF4 1120403456
SUBF4
ASGNF4
line 786
;786:	origin[1] -= 100;
ADDRLP4 508+4
ADDRLP4 508+4
INDIRF4
CNSTF4 1120403456
SUBF4
ASGNF4
line 787
;787:	origin[2] -= 100;
ADDRLP4 508+8
ADDRLP4 508+8
INDIRF4
CNSTF4 1120403456
SUBF4
ASGNF4
line 788
;788:	trap_R_AddLightToScene( origin, 500, 1.0, 0.0, 0.0 );
ADDRLP4 508
ARGP4
CNSTF4 1140457472
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 1004
CNSTF4 0
ASGNF4
ADDRLP4 1004
INDIRF4
ARGF4
ADDRLP4 1004
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 790
;789:
;790:	trap_R_RenderScene( &refdef );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_RenderScene
CALLV
pop
line 791
;791:}
LABELV $275
endproc UI_DrawPlayer 1008 28
proc UI_RegisterClientSkin 84 20
line 799
;792:
;793:
;794:/*
;795:==========================
;796:UI_RegisterClientSkin
;797:==========================
;798:*/
;799:static qboolean UI_RegisterClientSkin( playerInfo_t *pi, const char *modelName, const char *skinName ) {
line 802
;800:	char		filename[MAX_QPATH];
;801:
;802:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/lower_%s.skin", modelName, skinName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $358
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 803
;803:	pi->legsSkin = trap_R_RegisterSkin( filename );
ADDRLP4 0
ARGP4
ADDRLP4 64
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 64
INDIRI4
ASGNI4
line 805
;804:
;805:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/upper_%s.skin", modelName, skinName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $359
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 806
;806:	pi->torsoSkin = trap_R_RegisterSkin( filename );
ADDRLP4 0
ARGP4
ADDRLP4 68
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68
INDIRI4
ASGNI4
line 808
;807:
;808:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/head_%s.skin", modelName, skinName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $360
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 809
;809:	pi->headSkin = trap_R_RegisterSkin( filename );
ADDRLP4 0
ARGP4
ADDRLP4 72
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 811
;810:
;811:	if ( !pi->legsSkin || !pi->torsoSkin || !pi->headSkin ) {
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
CNSTI4 0
ASGNI4
ADDRLP4 76
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
EQI4 $364
ADDRLP4 76
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
EQI4 $364
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
NEI4 $361
LABELV $364
line 812
;812:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $357
JUMPV
LABELV $361
line 815
;813:	}
;814:
;815:	return qtrue;
CNSTI4 1
RETI4
LABELV $357
endproc UI_RegisterClientSkin 84 20
proc UI_ParseAnimationFile 20068 12
line 824
;816:}
;817:
;818:
;819:/*
;820:======================
;821:UI_ParseAnimationFile
;822:======================
;823:*/
;824:static qboolean UI_ParseAnimationFile( const char *filename, animation_t *animations ) {
line 834
;825:	char		*text_p, *prev;
;826:	int			len;
;827:	int			i;
;828:	char		*token;
;829:	float		fps;
;830:	int			skip;
;831:	char		text[20000];
;832:	fileHandle_t	f;
;833:
;834:	memset( animations, 0, sizeof( animation_t ) * MAX_ANIMATIONS );
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 868
ARGI4
ADDRGP4 memset
CALLP4
pop
line 837
;835:
;836:	// load the file
;837:	len = trap_FS_FOpenFile( filename, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20028
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 20032
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 20032
INDIRI4
ASGNI4
line 838
;838:	if ( len <= 0 ) {
ADDRLP4 24
INDIRI4
CNSTI4 0
GTI4 $366
line 839
;839:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $365
JUMPV
LABELV $366
line 841
;840:	}
;841:	if ( len >= ( sizeof( text ) - 1 ) ) {
ADDRLP4 24
INDIRI4
CVIU4 4
CNSTU4 19999
LTU4 $368
line 842
;842:		Com_Printf( "File %s too long\n", filename );
ADDRGP4 $370
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 843
;843:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $365
JUMPV
LABELV $368
line 845
;844:	}
;845:	trap_FS_Read( text, len, f );
ADDRLP4 28
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 20028
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 846
;846:	text[len] = 0;
ADDRLP4 24
INDIRI4
ADDRLP4 28
ADDP4
CNSTI1 0
ASGNI1
line 847
;847:	trap_FS_FCloseFile( f );
ADDRLP4 20028
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 850
;848:
;849:	// parse the text
;850:	text_p = text;
ADDRLP4 8
ADDRLP4 28
ASGNP4
line 851
;851:	skip = 0;	// quite the compiler warning
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 $372
JUMPV
LABELV $371
line 854
;852:
;853:	// read optional parameters
;854:	while ( 1 ) {
line 855
;855:		prev = text_p;	// so we can unget
ADDRLP4 16
ADDRLP4 8
INDIRP4
ASGNP4
line 856
;856:		token = COM_Parse( &text_p );
ADDRLP4 8
ARGP4
ADDRLP4 20036
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20036
INDIRP4
ASGNP4
line 857
;857:		if ( !token[0] ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $374
line 858
;858:			break;
ADDRGP4 $373
JUMPV
LABELV $374
line 860
;859:		}
;860:		if ( !Q_stricmp( token, "footsteps" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $378
ARGP4
ADDRLP4 20040
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20040
INDIRI4
CNSTI4 0
NEI4 $376
line 861
;861:			token = COM_Parse( &text_p );
ADDRLP4 8
ARGP4
ADDRLP4 20044
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20044
INDIRP4
ASGNP4
line 862
;862:			if ( !token[0] ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $372
line 863
;863:				break;
ADDRGP4 $373
JUMPV
line 865
;864:			}
;865:			continue;
LABELV $376
line 866
;866:		} else if ( !Q_stricmp( token, "headoffset" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $383
ARGP4
ADDRLP4 20044
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20044
INDIRI4
CNSTI4 0
NEI4 $381
line 867
;867:			for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $384
line 868
;868:				token = COM_Parse( &text_p );
ADDRLP4 8
ARGP4
ADDRLP4 20048
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20048
INDIRP4
ASGNP4
line 869
;869:				if ( !token[0] ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $388
line 870
;870:					break;
ADDRGP4 $372
JUMPV
LABELV $388
line 872
;871:				}
;872:			}
LABELV $385
line 867
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $384
line 873
;873:			continue;
ADDRGP4 $372
JUMPV
LABELV $381
line 874
;874:		} else if ( !Q_stricmp( token, "sex" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $392
ARGP4
ADDRLP4 20048
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20048
INDIRI4
CNSTI4 0
NEI4 $390
line 875
;875:			token = COM_Parse( &text_p );
ADDRLP4 8
ARGP4
ADDRLP4 20052
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20052
INDIRP4
ASGNP4
line 876
;876:			if ( !token[0] ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $372
line 877
;877:				break;
ADDRGP4 $373
JUMPV
line 879
;878:			}
;879:			continue;
LABELV $390
line 883
;880:		}
;881:
;882:		// if it is a number, start parsing animations
;883:		if ( token[0] >= '0' && token[0] <= '9' ) {
ADDRLP4 20052
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 20052
INDIRI4
CNSTI4 48
LTI4 $395
ADDRLP4 20052
INDIRI4
CNSTI4 57
GTI4 $395
line 884
;884:			text_p = prev;	// unget the token
ADDRLP4 8
ADDRLP4 16
INDIRP4
ASGNP4
line 885
;885:			break;
ADDRGP4 $373
JUMPV
LABELV $395
line 888
;886:		}
;887:
;888:		Com_Printf( "unknown token '%s' is %s\n", token, filename );
ADDRGP4 $397
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 889
;889:	}
LABELV $372
line 854
ADDRGP4 $371
JUMPV
LABELV $373
line 892
;890:
;891:	// read information for each frame
;892:	for ( i = 0 ; i < MAX_ANIMATIONS ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $398
line 894
;893:
;894:		token = COM_Parse( &text_p );
ADDRLP4 8
ARGP4
ADDRLP4 20036
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20036
INDIRP4
ASGNP4
line 895
;895:		if ( !token[0] ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $402
line 896
;896:			break;
ADDRGP4 $400
JUMPV
LABELV $402
line 898
;897:		}
;898:		animations[i].firstFrame = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20040
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
ADDP4
ADDRLP4 20040
INDIRI4
ASGNI4
line 900
;899:		// leg only frames are adjusted to not count the upper body only frames
;900:		if ( i == LEGS_WALKCR ) {
ADDRLP4 4
INDIRI4
CNSTI4 13
NEI4 $404
line 901
;901:			skip = animations[LEGS_WALKCR].firstFrame - animations[TORSO_GESTURE].firstFrame;
ADDRLP4 20044
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 20044
INDIRP4
CNSTI4 364
ADDP4
INDIRI4
ADDRLP4 20044
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
SUBI4
ASGNI4
line 902
;902:		}
LABELV $404
line 903
;903:		if ( i >= LEGS_WALKCR ) {
ADDRLP4 4
INDIRI4
CNSTI4 13
LTI4 $406
line 904
;904:			animations[i].firstFrame -= skip;
ADDRLP4 20044
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
ADDP4
ASGNP4
ADDRLP4 20044
INDIRP4
ADDRLP4 20044
INDIRP4
INDIRI4
ADDRLP4 20
INDIRI4
SUBI4
ASGNI4
line 905
;905:		}
LABELV $406
line 907
;906:
;907:		token = COM_Parse( &text_p );
ADDRLP4 8
ARGP4
ADDRLP4 20044
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20044
INDIRP4
ASGNP4
line 908
;908:		if ( !token[0] ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $408
line 909
;909:			break;
ADDRGP4 $400
JUMPV
LABELV $408
line 911
;910:		}
;911:		animations[i].numFrames = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20048
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 20048
INDIRI4
ASGNI4
line 913
;912:
;913:		token = COM_Parse( &text_p );
ADDRLP4 8
ARGP4
ADDRLP4 20052
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20052
INDIRP4
ASGNP4
line 914
;914:		if ( !token[0] ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $410
line 915
;915:			break;
ADDRGP4 $400
JUMPV
LABELV $410
line 917
;916:		}
;917:		animations[i].loopFrames = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20056
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 20056
INDIRI4
ASGNI4
line 919
;918:
;919:		token = COM_Parse( &text_p );
ADDRLP4 8
ARGP4
ADDRLP4 20060
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20060
INDIRP4
ASGNP4
line 920
;920:		if ( !token[0] ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $412
line 921
;921:			break;
ADDRGP4 $400
JUMPV
LABELV $412
line 923
;922:		}
;923:		fps = atof( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20064
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 20064
INDIRF4
ASGNF4
line 924
;924:		if ( fps == 0 ) {
ADDRLP4 12
INDIRF4
CNSTF4 0
NEF4 $414
line 925
;925:			fps = 1;
ADDRLP4 12
CNSTF4 1065353216
ASGNF4
line 926
;926:		}
LABELV $414
line 927
;927:		animations[i].frameLerp = 1000 / fps;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI4 12
ADDP4
CNSTF4 1148846080
ADDRLP4 12
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 928
;928:		animations[i].initialLerp = 1000 / fps;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
ADDP4
CNSTI4 16
ADDP4
CNSTF4 1148846080
ADDRLP4 12
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 929
;929:	}
LABELV $399
line 892
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 31
LTI4 $398
LABELV $400
line 931
;930:
;931:	if ( i != MAX_ANIMATIONS ) {
ADDRLP4 4
INDIRI4
CNSTI4 31
EQI4 $416
line 932
;932:		Com_Printf( "Error parsing animation file: %s", filename );
ADDRGP4 $418
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 933
;933:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $365
JUMPV
LABELV $416
line 936
;934:	}
;935:
;936:	return qtrue;
CNSTI4 1
RETI4
LABELV $365
endproc UI_ParseAnimationFile 20068 12
export UI_RegisterClientModelname
proc UI_RegisterClientModelname 220 16
line 945
;937:}
;938:
;939:
;940:/*
;941:==========================
;942:UI_RegisterClientModelname
;943:==========================
;944:*/
;945:qboolean UI_RegisterClientModelname( playerInfo_t *pi, const char *modelSkinName ) {
line 951
;946:	char		modelName[MAX_QPATH];
;947:	char		skinName[MAX_QPATH];
;948:	char		filename[MAX_QPATH];
;949:	char		*slash;
;950:
;951:	pi->torsoModel = 0;
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTI4 0
ASGNI4
line 952
;952:	pi->headModel = 0;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTI4 0
ASGNI4
line 954
;953:
;954:	if ( !modelSkinName[0] ) {
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $420
line 955
;955:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $419
JUMPV
LABELV $420
line 958
;956:	}
;957:
;958:	Q_strncpyz( modelName, modelSkinName, sizeof( modelName ) );
ADDRLP4 64
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 960
;959:
;960:	slash = strchr( modelName, '/' );
ADDRLP4 64
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 196
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 192
ADDRLP4 196
INDIRP4
ASGNP4
line 961
;961:	if ( !slash ) {
ADDRLP4 192
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $422
line 963
;962:		// modelName did not include a skin name
;963:		Q_strncpyz( skinName, "default", sizeof( skinName ) );
ADDRLP4 128
ARGP4
ADDRGP4 $424
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 964
;964:	} else {
ADDRGP4 $423
JUMPV
LABELV $422
line 965
;965:		Q_strncpyz( skinName, slash + 1, sizeof( skinName ) );
ADDRLP4 128
ARGP4
ADDRLP4 192
INDIRP4
CNSTI4 1
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 967
;966:		// truncate modelName
;967:		*slash = 0;
ADDRLP4 192
INDIRP4
CNSTI1 0
ASGNI1
line 968
;968:	}
LABELV $423
line 972
;969:
;970:	// load cmodels before models so filecache works
;971:
;972:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/lower.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $425
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 973
;973:	pi->legsModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 200
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 200
INDIRI4
ASGNI4
line 974
;974:	if ( !pi->legsModel ) {
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $426
line 975
;975:		Com_Printf( "Failed to load model file %s\n", filename );
ADDRGP4 $428
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 976
;976:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $419
JUMPV
LABELV $426
line 979
;977:	}
;978:
;979:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/upper.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $429
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 980
;980:	pi->torsoModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 204
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 204
INDIRI4
ASGNI4
line 981
;981:	if ( !pi->torsoModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 0
NEI4 $430
line 982
;982:		Com_Printf( "Failed to load model file %s\n", filename );
ADDRGP4 $428
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 983
;983:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $419
JUMPV
LABELV $430
line 986
;984:	}
;985:
;986:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/head.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $432
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 987
;987:	pi->headModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 208
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 208
INDIRI4
ASGNI4
line 988
;988:	if ( !pi->headModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
CNSTI4 0
NEI4 $433
line 989
;989:		Com_Printf( "Failed to load model file %s\n", filename );
ADDRGP4 $428
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 990
;990:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $419
JUMPV
LABELV $433
line 994
;991:	}
;992:
;993:	// if any skins failed to load, fall back to default
;994:	if ( !UI_RegisterClientSkin( pi, modelName, skinName ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 64
ARGP4
ADDRLP4 128
ARGP4
ADDRLP4 212
ADDRGP4 UI_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 212
INDIRI4
CNSTI4 0
NEI4 $435
line 995
;995:		if ( !UI_RegisterClientSkin( pi, modelName, "default" ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 $424
ARGP4
ADDRLP4 216
ADDRGP4 UI_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 216
INDIRI4
CNSTI4 0
NEI4 $437
line 996
;996:			Com_Printf( "Failed to load skin file: %s : %s\n", modelName, skinName );
ADDRGP4 $439
ARGP4
ADDRLP4 64
ARGP4
ADDRLP4 128
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 997
;997:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $419
JUMPV
LABELV $437
line 999
;998:		}
;999:	}
LABELV $435
line 1002
;1000:
;1001:	// load the animations
;1002:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/animation.cfg", modelName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $440
ARGP4
ADDRLP4 64
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1003
;1003:	if ( !UI_ParseAnimationFile( filename, pi->animations ) ) {
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
ARGP4
ADDRLP4 216
ADDRGP4 UI_ParseAnimationFile
CALLI4
ASGNI4
ADDRLP4 216
INDIRI4
CNSTI4 0
NEI4 $441
line 1004
;1004:		Com_Printf( "Failed to load animation file %s\n", filename );
ADDRGP4 $443
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 1005
;1005:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $419
JUMPV
LABELV $441
line 1008
;1006:	}
;1007:
;1008:	return qtrue;
CNSTI4 1
RETI4
LABELV $419
endproc UI_RegisterClientModelname 220 16
export UI_PlayerInfo_SetModel
proc UI_PlayerInfo_SetModel 12 12
line 1017
;1009:}
;1010:
;1011:
;1012:/*
;1013:===============
;1014:UI_PlayerInfo_SetModel
;1015:===============
;1016:*/
;1017:void UI_PlayerInfo_SetModel( playerInfo_t *pi, const char *model ) {
line 1018
;1018:	memset( pi, 0, sizeof(*pi) );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1108
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1019
;1019:	UI_RegisterClientModelname( pi, model );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 UI_RegisterClientModelname
CALLI4
pop
line 1020
;1020:	pi->weapon = WP_HAND;
ADDRFP4 0
INDIRP4
CNSTI4 1052
ADDP4
CNSTI4 1
ASGNI4
line 1021
;1021:	pi->currentWeapon = pi->weapon;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 1040
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ASGNI4
line 1022
;1022:	pi->lastWeapon = pi->weapon;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 1056
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ASGNI4
line 1023
;1023:	pi->pendingWeapon = -1;
ADDRFP4 0
INDIRP4
CNSTI4 1060
ADDP4
CNSTI4 -1
ASGNI4
line 1024
;1024:	pi->weaponTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1064
ADDP4
CNSTI4 0
ASGNI4
line 1025
;1025:	pi->chat = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 1084
ADDP4
CNSTI4 0
ASGNI4
line 1026
;1026:	pi->newModel = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 1088
ADDP4
CNSTI4 1
ASGNI4
line 1027
;1027:	UI_PlayerInfo_SetWeapon( pi, pi->weapon );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_PlayerInfo_SetWeapon
CALLV
pop
line 1028
;1028:}
LABELV $444
endproc UI_PlayerInfo_SetModel 12 12
export UI_PlayerInfo_SetInfo
proc UI_PlayerInfo_SetInfo 36 8
line 1036
;1029:
;1030:
;1031:/*
;1032:===============
;1033:UI_PlayerInfo_SetInfo
;1034:===============
;1035:*/
;1036:void UI_PlayerInfo_SetInfo( playerInfo_t *pi, int legsAnim, int torsoAnim, vec3_t viewAngles, vec3_t moveAngles, weapon_t weaponNumber, qboolean chat ) {
line 1040
;1037:	int			currentAnim;
;1038:	weapon_t	weaponNum;
;1039:
;1040:	pi->chat = chat;
ADDRFP4 0
INDIRP4
CNSTI4 1084
ADDP4
ADDRFP4 24
INDIRI4
ASGNI4
line 1043
;1041:
;1042:	// view angles
;1043:	VectorCopy( viewAngles, pi->viewAngles );
ADDRFP4 0
INDIRP4
CNSTI4 1016
ADDP4
ADDRFP4 12
INDIRP4
INDIRB
ASGNB 12
line 1046
;1044:
;1045:	// move angles
;1046:	VectorCopy( moveAngles, pi->moveAngles );
ADDRFP4 0
INDIRP4
CNSTI4 1028
ADDP4
ADDRFP4 16
INDIRP4
INDIRB
ASGNB 12
line 1048
;1047:
;1048:	if ( pi->newModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 1088
ADDP4
INDIRI4
CNSTI4 0
EQI4 $446
line 1049
;1049:		pi->newModel = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 1088
ADDP4
CNSTI4 0
ASGNI4
line 1051
;1050:
;1051:		jumpHeight = 0;
ADDRGP4 jumpHeight
CNSTF4 0
ASGNF4
line 1052
;1052:		pi->pendingLegsAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
CNSTI4 0
ASGNI4
line 1053
;1053:		UI_ForceLegsAnim( pi, legsAnim );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 UI_ForceLegsAnim
CALLV
pop
line 1054
;1054:		pi->legs.yawAngle = viewAngles[YAW];
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1055
;1055:		pi->legs.yawing = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 0
ASGNI4
line 1057
;1056:
;1057:		pi->pendingTorsoAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
CNSTI4 0
ASGNI4
line 1058
;1058:		UI_ForceTorsoAnim( pi, torsoAnim );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 UI_ForceTorsoAnim
CALLV
pop
line 1059
;1059:		pi->torso.yawAngle = viewAngles[YAW];
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 1060
;1060:		pi->torso.yawing = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 0
ASGNI4
line 1062
;1061:
;1062:		if ( weaponNumber != -1 ) {
ADDRFP4 20
INDIRI4
CNSTI4 -1
EQI4 $445
line 1063
;1063:			pi->weapon = weaponNumber;
ADDRFP4 0
INDIRP4
CNSTI4 1052
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1064
;1064:			pi->currentWeapon = weaponNumber;
ADDRFP4 0
INDIRP4
CNSTI4 1040
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1065
;1065:			pi->lastWeapon = weaponNumber;
ADDRFP4 0
INDIRP4
CNSTI4 1056
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1066
;1066:			pi->pendingWeapon = -1;
ADDRFP4 0
INDIRP4
CNSTI4 1060
ADDP4
CNSTI4 -1
ASGNI4
line 1067
;1067:			pi->weaponTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1064
ADDP4
CNSTI4 0
ASGNI4
line 1068
;1068:			UI_PlayerInfo_SetWeapon( pi, pi->weapon );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_PlayerInfo_SetWeapon
CALLV
pop
line 1069
;1069:		}
line 1071
;1070:
;1071:		return;
ADDRGP4 $445
JUMPV
LABELV $446
line 1075
;1072:	}
;1073:
;1074:	// weapon
;1075:	if ( weaponNumber == -1 ) {
ADDRFP4 20
INDIRI4
CNSTI4 -1
NEI4 $450
line 1076
;1076:		pi->pendingWeapon = -1;
ADDRFP4 0
INDIRP4
CNSTI4 1060
ADDP4
CNSTI4 -1
ASGNI4
line 1077
;1077:		pi->weaponTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1064
ADDP4
CNSTI4 0
ASGNI4
line 1078
;1078:	}
ADDRGP4 $451
JUMPV
LABELV $450
line 1079
;1079:	else if ( weaponNumber != WP_HAND ) {
ADDRFP4 20
INDIRI4
CNSTI4 1
EQI4 $452
line 1080
;1080:		pi->pendingWeapon = weaponNumber;
ADDRFP4 0
INDIRP4
CNSTI4 1060
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1081
;1081:		pi->weaponTimer = dp_realtime + UI_TIMER_WEAPON_DELAY;
ADDRFP4 0
INDIRP4
CNSTI4 1064
ADDP4
ADDRGP4 dp_realtime
INDIRI4
CNSTI4 250
ADDI4
ASGNI4
line 1082
;1082:	}
LABELV $452
LABELV $451
line 1083
;1083:	weaponNum = pi->lastWeapon;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 1056
ADDP4
INDIRI4
ASGNI4
line 1084
;1084:	pi->weapon = weaponNum;
ADDRFP4 0
INDIRP4
CNSTI4 1052
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 1086
;1085:
;1086:	if ( torsoAnim == BOTH_DEATH1 || legsAnim == BOTH_DEATH1 ) {
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRFP4 8
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $456
ADDRFP4 4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $454
LABELV $456
line 1087
;1087:		torsoAnim = legsAnim = BOTH_DEATH1;
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRFP4 4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRFP4 8
ADDRLP4 12
INDIRI4
ASGNI4
line 1088
;1088:		pi->weapon = pi->currentWeapon = WP_HAND;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
CNSTI4 1
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 1040
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 1052
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 1089
;1089:		UI_PlayerInfo_SetWeapon( pi, pi->weapon );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_PlayerInfo_SetWeapon
CALLV
pop
line 1091
;1090:
;1091:		jumpHeight = 0;
ADDRGP4 jumpHeight
CNSTF4 0
ASGNF4
line 1092
;1092:		pi->pendingLegsAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
CNSTI4 0
ASGNI4
line 1093
;1093:		UI_ForceLegsAnim( pi, legsAnim );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 UI_ForceLegsAnim
CALLV
pop
line 1095
;1094:
;1095:		pi->pendingTorsoAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
CNSTI4 0
ASGNI4
line 1096
;1096:		UI_ForceTorsoAnim( pi, torsoAnim );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 UI_ForceTorsoAnim
CALLV
pop
line 1098
;1097:
;1098:		return;
ADDRGP4 $445
JUMPV
LABELV $454
line 1102
;1099:	}
;1100:
;1101:	// leg animation
;1102:	currentAnim = pi->legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1103
;1103:	if ( legsAnim != LEGS_JUMP && ( currentAnim == LEGS_JUMP || currentAnim == LEGS_LAND ) ) {
ADDRLP4 12
CNSTI4 18
ASGNI4
ADDRFP4 4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $457
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $459
ADDRLP4 0
INDIRI4
CNSTI4 19
NEI4 $457
LABELV $459
line 1104
;1104:		pi->pendingLegsAnim = legsAnim;
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 1105
;1105:	}
ADDRGP4 $458
JUMPV
LABELV $457
line 1106
;1106:	else if ( legsAnim != currentAnim ) {
ADDRFP4 4
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $460
line 1107
;1107:		jumpHeight = 0;
ADDRGP4 jumpHeight
CNSTF4 0
ASGNF4
line 1108
;1108:		pi->pendingLegsAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1068
ADDP4
CNSTI4 0
ASGNI4
line 1109
;1109:		UI_ForceLegsAnim( pi, legsAnim );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 UI_ForceLegsAnim
CALLV
pop
line 1110
;1110:	}
LABELV $460
LABELV $458
line 1113
;1111:
;1112:	// torso animation
;1113:	if ( torsoAnim == TORSO_STAND || torsoAnim == TORSO_STAND2 ) {
ADDRLP4 20
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 11
EQI4 $464
ADDRLP4 20
INDIRI4
CNSTI4 12
NEI4 $462
LABELV $464
line 1114
;1114:		if ( weaponNum == WP_HAND || weaponNum == WP_HAND ) {
ADDRLP4 28
CNSTI4 1
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 28
INDIRI4
EQI4 $467
ADDRLP4 4
INDIRI4
ADDRLP4 28
INDIRI4
NEI4 $465
LABELV $467
line 1115
;1115:			torsoAnim = TORSO_STAND2;
ADDRFP4 8
CNSTI4 12
ASGNI4
line 1116
;1116:		}
ADDRGP4 $466
JUMPV
LABELV $465
line 1117
;1117:		else {
line 1118
;1118:			torsoAnim = TORSO_STAND;
ADDRFP4 8
CNSTI4 11
ASGNI4
line 1119
;1119:		}
LABELV $466
line 1120
;1120:	}
LABELV $462
line 1122
;1121:
;1122:	if ( torsoAnim == TORSO_ATTACK || torsoAnim == TORSO_ATTACK2 ) {
ADDRLP4 24
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 7
EQI4 $470
ADDRLP4 24
INDIRI4
CNSTI4 8
NEI4 $468
LABELV $470
line 1123
;1123:		if ( weaponNum == WP_HAND || weaponNum == WP_HAND ) {
ADDRLP4 32
CNSTI4 1
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 32
INDIRI4
EQI4 $473
ADDRLP4 4
INDIRI4
ADDRLP4 32
INDIRI4
NEI4 $471
LABELV $473
line 1124
;1124:			torsoAnim = TORSO_ATTACK2;
ADDRFP4 8
CNSTI4 8
ASGNI4
line 1125
;1125:		}
ADDRGP4 $472
JUMPV
LABELV $471
line 1126
;1126:		else {
line 1127
;1127:			torsoAnim = TORSO_ATTACK;
ADDRFP4 8
CNSTI4 7
ASGNI4
line 1128
;1128:		}
LABELV $472
line 1129
;1129:		pi->muzzleFlashTime = dp_realtime + UI_TIMER_MUZZLE_FLASH;
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 dp_realtime
INDIRI4
CNSTI4 20
ADDI4
ASGNI4
line 1131
;1130:		//FIXME play firing sound here
;1131:	}
LABELV $468
line 1133
;1132:
;1133:	currentAnim = pi->torsoAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1048
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1135
;1134:
;1135:	if ( weaponNum != pi->currentWeapon || currentAnim == TORSO_RAISE || currentAnim == TORSO_DROP ) {
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1040
ADDP4
INDIRI4
NEI4 $477
ADDRLP4 0
INDIRI4
CNSTI4 10
EQI4 $477
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $474
LABELV $477
line 1136
;1136:		pi->pendingTorsoAnim = torsoAnim;
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 1137
;1137:	}
ADDRGP4 $475
JUMPV
LABELV $474
line 1138
;1138:	else if ( ( currentAnim == TORSO_GESTURE || currentAnim == TORSO_ATTACK ) && ( torsoAnim != currentAnim ) ) {
ADDRLP4 0
INDIRI4
CNSTI4 6
EQI4 $480
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $478
LABELV $480
ADDRFP4 8
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $478
line 1139
;1139:		pi->pendingTorsoAnim = torsoAnim;
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 1140
;1140:	}
ADDRGP4 $479
JUMPV
LABELV $478
line 1141
;1141:	else if ( torsoAnim != currentAnim ) {
ADDRFP4 8
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $481
line 1142
;1142:		pi->pendingTorsoAnim = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1076
ADDP4
CNSTI4 0
ASGNI4
line 1143
;1143:		UI_ForceTorsoAnim( pi, torsoAnim );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 UI_ForceTorsoAnim
CALLV
pop
line 1144
;1144:	}
LABELV $481
LABELV $479
LABELV $475
line 1145
;1145:}
LABELV $445
endproc UI_PlayerInfo_SetInfo 36 8
bss
align 4
LABELV jumpHeight
skip 4
align 4
LABELV dp_realtime
skip 4
import UI_RankStatusMenu
import RankStatus_Cache
import UI_SignupMenu
import Signup_Cache
import UI_LoginMenu
import Login_Cache
import UI_RankingsMenu
import Rankings_Cache
import Rankings_DrawPassword
import Rankings_DrawName
import Rankings_DrawText
import UI_InitGameinfo
import UI_SPUnlockMedals_f
import UI_SPUnlock_f
import UI_GetAwardLevel
import UI_LogAwardData
import UI_NewGame
import UI_GetCurrentGame
import UI_CanShowTierVideo
import UI_ShowTierVideo
import UI_TierCompleted
import UI_SetBestScore
import UI_GetBestScore
import UI_GetNumBots
import UI_GetBotInfoByName
import UI_GetBotInfoByNumber
import UI_GetNumSPTiers
import UI_GetNumSPArenas
import UI_GetNumArenas
import UI_GetSpecialArenaInfo
import UI_GetArenaInfoByMap
import UI_GetArenaInfoByNumber
import UI_NetworkOptionsMenu
import UI_NetworkOptionsMenu_Cache
import UI_SoundOptionsMenu
import UI_SoundOptionsMenu_Cache
import UI_DisplayOptionsMenu
import UI_DisplayOptionsMenu_Cache
import UI_SaveConfigMenu
import UI_SaveConfigMenu_Cache
import UI_LoadConfigMenu
import UI_LoadConfig_Cache
import UI_TeamOrdersMenu_Cache
import UI_TeamOrdersMenu_f
import UI_TeamOrdersMenu
import UI_RemoveBotsMenu
import UI_RemoveBots_Cache
import UI_AddBotsMenu
import UI_AddBots_Cache
import trap_SetPbClStatus
import trap_MemoryRemaining
import trap_LAN_GetPingInfo
import trap_LAN_GetPing
import trap_LAN_ClearPing
import trap_LAN_ServerStatus
import trap_LAN_GetPingQueueCount
import trap_LAN_GetServerInfo
import trap_LAN_GetServerAddressString
import trap_LAN_GetServerCount
import trap_GetConfigString
import trap_GetGlconfig
import trap_GetClientState
import trap_GetClipboardData
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_ClearStates
import trap_Key_SetOverstrikeMode
import trap_Key_GetOverstrikeMode
import trap_Key_IsDown
import trap_Key_SetBinding
import trap_Key_GetBindingBuf
import trap_Key_KeynumToStringBuf
import trap_S_RegisterSound
import trap_S_StartLocalSound
import trap_CM_LerpTag
import trap_UpdateScreen
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_AddLightToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Cmd_ExecuteText
import trap_Argv
import trap_Argc
import trap_Cvar_InfoStringBuffer
import trap_Cvar_Create
import trap_Cvar_Reset
import trap_Cvar_SetValue
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import UI_SPSkillMenu_Cache
import UI_SPSkillMenu
import UI_SPPostgameMenu_f
import UI_SPPostgameMenu_Cache
import UI_SPArena_Start
import UI_SPLevelMenu_ReInit
import UI_SPLevelMenu_f
import UI_SPLevelMenu
import UI_SPLevelMenu_Cache
import uis
import m_entersound
import UI_StartDemoLoop
import UI_Cvar_VariableString
import UI_Argv
import UI_ForceMenuOff
import UI_PoemsMenu
import UI_PopMenu
import UI_PushMenu
import UI_SetActiveMenu
import UI_IsFullscreen
import UI_DrawTextBox
import UI_AdjustFrom640
import UI_CursorInRect
import UI_DrawChar
import UI_DrawString
import UI_ProportionalStringWidth
import UI_DrawProportionalString_AutoWrapped
import UI_DrawProportionalString
import UI_ProportionalSizeScale
import UI_DrawBannerString
import UI_LerpColor
import UI_SetColor
import UI_UpdateScreen
import UI_DrawRect
import UI_FillRect
import UI_DrawHandlePic
import UI_DrawNamedPic
import UI_ClampCvar
import UI_ConsoleCommand
import UI_Refresh
import UI_MouseEvent
import UI_KeyEvent
import UI_Shutdown
import UI_Init
import DriverInfo_Cache
import GraphicsOptions_Cache
import UI_GraphicsOptionsMenu
import ServerInfo_Cache
import UI_ServerInfoMenu
import UI_BotSelectMenu_Cache
import UI_BotSelectMenu
import ServerOptions_Cache
import StartServer_Cache
import UI_StartServerMenu
import ArenaServers_Cache
import UI_ArenaServersMenu
import SpecifyServer_Cache
import UI_SpecifyServerMenu
import SpecifyLeague_Cache
import UI_SpecifyLeagueMenu
import Preferences_Cache
import UI_PreferencesMenu
import PlayerSettings_Cache
import UI_PlayerSettingsMenu
import PlayerModel_Cache
import UI_PlayerModelMenu
import UI_ModsMenu_Cache
import UI_ModsMenu
import UI_CinematicsMenu_Cache
import UI_CinematicsMenu_f
import UI_CinematicsMenu
import Demos_Cache
import UI_DemosMenu
import Controls_Cache
import UI_ControlsMenu
import UI_DrawConnectScreen
import TeamMain_Cache
import UI_TeamMainMenu
import UI_SetupMenu
import UI_SetupMenu_Cache
import UI_Message
import UI_ConfirmMenu_Style
import UI_ConfirmMenu
import ConfirmMenu_Cache
import UI_BotCommandMenu_f
import UI_DynamicMenu
import UI_DynamicMenuCache
import UI_InGameMenu
import InGame_Cache
import UI_CreditMenu
import UI_UpdateCvars
import UI_RegisterCvars
import UI_MainMenu
import MainMenu_Cache
import MenuField_Key
import MenuField_Draw
import MenuField_Init
import MField_Draw
import MField_CharEvent
import MField_KeyDownEvent
import MField_Clear
import ui_medalSounds
import ui_medalPicNames
import ui_medalNames
import text_color_highlight
import text_color_normal
import text_color_disabled
import listbar_color
import list_color
import name_color
import color_dim
import color_red
import color_orange
import color_blue
import color_yellow
import color_white
import color_black
import menu_dim_color
import menu_black_color
import menu_red_color
import menu_highlight_color
import menu_dark_color
import menu_grayed_color
import menu_text_color
import weaponChangeSound
import menu_null_sound
import menu_buzz_sound
import menu_out_sound
import menu_move_sound
import menu_in_sound
import ScrollList_Key
import ScrollList_Draw
import Bitmap_Draw
import Bitmap_Init
import Menu_DefaultKey
import Menu_SetCursorToItem
import Menu_SetCursor
import Menu_ActivateItem
import Menu_ItemAtCursor
import Menu_Draw
import Menu_AdjustCursor
import Menu_AddItem
import Menu_Focus
import Menu_Cache
import ui_server16
import ui_server15
import ui_server14
import ui_server13
import ui_server12
import ui_server11
import ui_server10
import ui_server9
import ui_server8
import ui_server7
import ui_server6
import ui_server5
import ui_server4
import ui_server3
import ui_server2
import ui_server1
import ui_marks
import ui_drawCrosshairNames
import ui_drawCrosshair
import ui_brassTime
import ui_browserShowEmpty
import ui_browserShowFull
import ui_browserSortKey
import ui_browserGameType
import ui_browserMaster
import ui_spSelection
import ui_spSkill
import ui_spVideos
import ui_spAwards
import ui_spScores5
import ui_spScores4
import ui_spScores3
import ui_spScores2
import ui_spScores1
import ui_botsFile
import ui_arenasFile
import ui_ctf_friendly
import ui_ctf_timelimit
import ui_ctf_capturelimit
import ui_team_friendly
import ui_team_timelimit
import ui_team_fraglimit
import ui_tourney_timelimit
import ui_tourney_fraglimit
import ui_ffa_timelimit
import ui_ffa_fraglimit
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $443
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $440
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 46
byte 1 99
byte 1 102
byte 1 103
byte 1 0
align 1
LABELV $439
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $432
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $429
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $428
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $425
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $424
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 0
align 1
LABELV $418
byte 1 69
byte 1 114
byte 1 114
byte 1 111
byte 1 114
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $397
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 111
byte 1 107
byte 1 101
byte 1 110
byte 1 32
byte 1 39
byte 1 37
byte 1 115
byte 1 39
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $392
byte 1 115
byte 1 101
byte 1 120
byte 1 0
align 1
LABELV $383
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 111
byte 1 102
byte 1 102
byte 1 115
byte 1 101
byte 1 116
byte 1 0
align 1
LABELV $378
byte 1 102
byte 1 111
byte 1 111
byte 1 116
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 115
byte 1 0
align 1
LABELV $370
byte 1 70
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 110
byte 1 103
byte 1 10
byte 1 0
align 1
LABELV $360
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $359
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 117
byte 1 112
byte 1 112
byte 1 101
byte 1 114
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $358
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $352
byte 1 115
byte 1 112
byte 1 114
byte 1 105
byte 1 116
byte 1 101
byte 1 115
byte 1 47
byte 1 98
byte 1 97
byte 1 108
byte 1 108
byte 1 111
byte 1 111
byte 1 110
byte 1 51
byte 1 0
align 1
LABELV $348
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $342
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 0
align 1
LABELV $334
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 0
align 1
LABELV $151
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $90
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $89
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
